CCS PCH C Compiler, Version 5.011, 5967               30-Μαρ-21 20:23

               Filename:   F:\Embedded Systems\Εργαστηριο\Εργαστήριο2\Ask1\askisi1.lst

               ROM used:   256 bytes (1%)
                           Largest free fragment is 30460
               RAM used:   5 (0%) at main() level
                           8 (0%) worst case
               Stack used: 1 locations
               Stack size: 31

*
0800:  GOTO   0834
.................... #include <main.h>  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
....................  
.................... #list 
....................  
.................... #DEVICE HIGH_INTS=TRUE 
.................... #device adc=10 
....................  
.................... #FUSES NOWDT                     //No Watch Dog Timer 
.................... #FUSES WDT32768                    //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES HSPLL                     //High Speed Crystal/Resonator with PLL enabled 
.................... #FUSES NOPROTECT                 //Code not protected from reading 
.................... #FUSES BROWNOUT                //No brownout reset 
.................... //#FUSES BORV20                    //Brownout reset at 2.0V 
.................... #FUSES NOPUT                     //No Power Up Timer 
.................... #FUSES NOCPD                     //No EE protection 
.................... #FUSES STVREN                    //Stack full/underflow will cause reset 
.................... #FUSES NODEBUG                   //No Debug mode for ICD 
.................... #FUSES NOLVP                     //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                     //Program memory not write protected 
.................... #FUSES NOWRTD                    //Data EEPROM not write protected 
.................... #FUSES NOIESO                      //Internal External Switch Over mode enabled 
.................... #FUSES NOFCMEN                     //Fail-safe clock monitor enabled 
.................... #FUSES NOPBADEN                 ///PORTB pins are configured as analog input channels on RESET 
.................... #FUSES NOWRTC                    //configuration not registers write protected 
.................... #FUSES NOWRTB                    //Boot block not write protected 
.................... #FUSES NOEBTR                    //Memory not protected from table reads 
.................... #FUSES NOEBTRB                   //Boot block not protected from table reads 
.................... #FUSES NOCPB                     //No Boot Block code protection 
.................... #FUSES MCLR                      //Master Clear pin enabled 
.................... #FUSES NOLPT1OSC                   //Timer1 configured for low-power operation 
.................... #FUSES NOXINST                   //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... #FUSES PLL5                      //Divide By 12(48MHz oscillator input) 
.................... #FUSES CPUDIV1                   //System Clock by 2 
.................... #FUSES USBDIV                    //USB clock source comes from PLL divide by 2 
.................... #FUSES VREGEN                    //USB voltage regulator enabled 
.................... #FUSES ICPRT                     //ICPRT enabled 
.................... #FUSES WRTB 
.................... #FUSES NOICPRT  
.................... #FUSES NOLPT1OSC 
.................... #FUSES CCP2B3  
.................... #FUSES NOCPB 
.................... #FUSES NOCPD 
.................... #FUSES NOWRTC 
.................... #FUSES NOWRTD 
.................... #FUSES NOEBTR 
.................... #FUSES NOEBTRB               
....................  
.................... /* systm clock is 48 MHz */ 
.................... #use delay(clock=48000000,RESTART_WDT) 
*
0808:  CLRF   FEA
080A:  MOVLW  08
080C:  MOVWF  FE9
080E:  MOVF   FEF,W
0810:  BZ    0832
0812:  MOVLW  0F
0814:  MOVWF  01
0816:  MOVLW  BF
0818:  MOVWF  00
081A:  CLRWDT
081C:  DECFSZ 00,F
081E:  BRA    081A
0820:  DECFSZ 01,F
0822:  BRA    0816
0824:  MOVLW  8F
0826:  MOVWF  00
0828:  DECFSZ 00,F
082A:  BRA    0828
082C:  CLRWDT
082E:  DECFSZ FEF,F
0830:  BRA    0812
0832:  RETURN 0
.................... /* --- BEGIN: changes required for bootloader ------------------------------ */ 
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* map reset vector and interrupt vector                                     */ 
.................... /* 0x000-0x7FF is used by the bootloader. The bootloader maps the original   */ 
.................... /* reset vecotr (0x000) to 0x800 and the reset vector (0x008) to 0x800.      */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... #build (reset=0x800, interrupt=0x808) 
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* reserve boot block area                                                   */ 
.................... /* This memory range is used by the bootloader, so the application must not  */ 
.................... /* use this area.                                                            */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... #org 0, 0x7FF {} 
....................  
.................... /* --- END: changes required for bootloader -------------------------------- */ 
....................  
....................  
....................  
....................  
....................  
....................                    
.................... #byte PORTB=0xF81  
.................... #byte PORTD=0xF83 
....................         
....................                    
....................  
....................  
.................... void main(void){ 
0834:  CLRF   FF8
0836:  BSF    FD0.7
0838:  MOVF   FC1,W
083A:  ANDLW  C0
083C:  IORLW  0F
083E:  MOVWF  FC1
0840:  MOVLW  07
0842:  MOVWF  FB4
....................  
.................... set_tris_b(0x00);   
0844:  MOVLW  00
0846:  MOVWF  F93
.................... set_tris_d(0xFF); 
0848:  MOVLW  FF
084A:  MOVWF  F95
....................  
....................  
.................... int i; 
....................    while(TRUE) { 
....................       int answear=input_d(); 
084C:  SETF   F95
084E:  MOVFF  F83,06
....................       if(answear%2==0) { 
0852:  MOVF   06,W
0854:  ANDLW  01
0856:  BNZ   088A
....................         for(i=0;i<10;i++){ 
0858:  CLRF   05
085A:  MOVF   05,W
085C:  SUBLW  09
085E:  BNC   0888
....................             output_bit(PIN_B0,1); 
0860:  BSF    F8A.0
0862:  BCF    F93.0
....................             delay_ms(1000); 
0864:  MOVLW  04
0866:  MOVWF  07
0868:  MOVLW  FA
086A:  MOVWF  08
086C:  RCALL  0808
086E:  DECFSZ 07,F
0870:  BRA    0868
....................             output_bit(PIN_B0,0); 
0872:  BCF    F8A.0
0874:  BCF    F93.0
....................             delay_ms(1000); 
0876:  MOVLW  04
0878:  MOVWF  07
087A:  MOVLW  FA
087C:  MOVWF  08
087E:  RCALL  0808
0880:  DECFSZ 07,F
0882:  BRA    087A
0884:  INCF   05,F
0886:  BRA    085A
....................         } 
....................       } 
0888:  BRA    0900
....................       else{ 
....................          if(input(PIN_D7)){ 
088A:  BSF    F95.7
088C:  BTFSS  F83.7
088E:  BRA    08C2
....................             for(i=0;i<5;i++) 
0890:  CLRF   05
0892:  MOVF   05,W
0894:  SUBLW  04
0896:  BNC   08C0
....................             { 
....................             output_high(PIN_B1); 
0898:  BCF    F93.1
089A:  BSF    F8A.1
....................             delay_ms(1000); 
089C:  MOVLW  04
089E:  MOVWF  07
08A0:  MOVLW  FA
08A2:  MOVWF  08
08A4:  RCALL  0808
08A6:  DECFSZ 07,F
08A8:  BRA    08A0
....................             output_low(PIN_B1); 
08AA:  BCF    F93.1
08AC:  BCF    F8A.1
....................             delay_ms(1000);} 
08AE:  MOVLW  04
08B0:  MOVWF  07
08B2:  MOVLW  FA
08B4:  MOVWF  08
08B6:  RCALL  0808
08B8:  DECFSZ 07,F
08BA:  BRA    08B2
08BC:  INCF   05,F
08BE:  BRA    0892
....................          }else{ 
08C0:  BRA    08F2
....................             for(i=0;i<2;i++){ 
08C2:  CLRF   05
08C4:  MOVF   05,W
08C6:  SUBLW  01
08C8:  BNC   08F2
....................             output_high(PIN_B2); 
08CA:  BCF    F93.2
08CC:  BSF    F8A.2
....................             delay_ms(1000); 
08CE:  MOVLW  04
08D0:  MOVWF  07
08D2:  MOVLW  FA
08D4:  MOVWF  08
08D6:  RCALL  0808
08D8:  DECFSZ 07,F
08DA:  BRA    08D2
....................             output_low(PIN_B2); 
08DC:  BCF    F93.2
08DE:  BCF    F8A.2
....................             delay_ms(1000);} 
08E0:  MOVLW  04
08E2:  MOVWF  07
08E4:  MOVLW  FA
08E6:  MOVWF  08
08E8:  RCALL  0808
08EA:  DECFSZ 07,F
08EC:  BRA    08E4
08EE:  INCF   05,F
08F0:  BRA    08C4
....................          } 
....................        
....................       delay_ms(3000); 
08F2:  MOVLW  0C
08F4:  MOVWF  07
08F6:  MOVLW  FA
08F8:  MOVWF  08
08FA:  RCALL  0808
08FC:  DECFSZ 07,F
08FE:  BRA    08F6
....................    } 
0900:  BRA    084C
.................... } 
.................... } 
....................      
0902:  SLEEP 

Configuration Fuses:
   Word  1: 0E24   PLL5 CPUDIV1 USBDIV HSPLL NOFCMEN NOIESO
   Word  2: 1E3F   NOPUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8000   CCP2B3 NOPBADEN NOLPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP ICSP1 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: A00F   NOWRT NOWRTC WRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
