CCS PCH C Compiler, Version 5.011, 5967               01-Απρ-21 13:00

               Filename:   F:\Embedded Systems\Εργαστηριο\Εργαστήριο2\Ask2\askk2.lst

               ROM used:   286 bytes (1%)
                           Largest free fragment is 30430
               RAM used:   13 (1%) at main() level
                           19 (1%) worst case
               Stack used: 2 locations
               Stack size: 31

*
0800:  GOTO   0896
.................... #include<main.h> 
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
....................  
.................... #list 
....................  
.................... #DEVICE HIGH_INTS=TRUE 
.................... #device adc=10 
....................  
.................... #FUSES NOWDT                     //No Watch Dog Timer 
.................... #FUSES WDT32768                    //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES HSPLL                     //High Speed Crystal/Resonator with PLL enabled 
.................... #FUSES NOPROTECT                 //Code not protected from reading 
.................... #FUSES BROWNOUT                //No brownout reset 
.................... //#FUSES BORV20                    //Brownout reset at 2.0V 
.................... #FUSES NOPUT                     //No Power Up Timer 
.................... #FUSES NOCPD                     //No EE protection 
.................... #FUSES STVREN                    //Stack full/underflow will cause reset 
.................... #FUSES NODEBUG                   //No Debug mode for ICD 
.................... #FUSES NOLVP                     //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                     //Program memory not write protected 
.................... #FUSES NOWRTD                    //Data EEPROM not write protected 
.................... #FUSES NOIESO                      //Internal External Switch Over mode enabled 
.................... #FUSES NOFCMEN                     //Fail-safe clock monitor enabled 
.................... #FUSES NOPBADEN                 ///PORTB pins are configured as analog input channels on RESET 
.................... #FUSES NOWRTC                    //configuration not registers write protected 
.................... #FUSES NOWRTB                    //Boot block not write protected 
.................... #FUSES NOEBTR                    //Memory not protected from table reads 
.................... #FUSES NOEBTRB                   //Boot block not protected from table reads 
.................... #FUSES NOCPB                     //No Boot Block code protection 
.................... #FUSES MCLR                      //Master Clear pin enabled 
.................... #FUSES NOLPT1OSC                   //Timer1 configured for low-power operation 
.................... #FUSES NOXINST                   //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... #FUSES PLL5                      //Divide By 12(48MHz oscillator input) 
.................... #FUSES CPUDIV1                   //System Clock by 2 
.................... #FUSES USBDIV                    //USB clock source comes from PLL divide by 2 
.................... #FUSES VREGEN                    //USB voltage regulator enabled 
.................... #FUSES ICPRT                     //ICPRT enabled 
.................... #FUSES WRTB 
.................... #FUSES NOICPRT  
.................... #FUSES NOLPT1OSC 
.................... #FUSES CCP2B3  
.................... #FUSES NOCPB 
.................... #FUSES NOCPD 
.................... #FUSES NOWRTC 
.................... #FUSES NOWRTD 
.................... #FUSES NOEBTR 
.................... #FUSES NOEBTRB               
....................  
.................... /* systm clock is 48 MHz */ 
.................... #use delay(clock=48000000,RESTART_WDT) 
*
0808:  CLRF   FEA
080A:  MOVLW  12
080C:  MOVWF  FE9
080E:  MOVF   FEF,W
0810:  BZ    0832
0812:  MOVLW  0F
0814:  MOVWF  01
0816:  MOVLW  BF
0818:  MOVWF  00
081A:  CLRWDT
081C:  DECFSZ 00,F
081E:  BRA    081A
0820:  DECFSZ 01,F
0822:  BRA    0816
0824:  MOVLW  8F
0826:  MOVWF  00
0828:  DECFSZ 00,F
082A:  BRA    0828
082C:  CLRWDT
082E:  DECFSZ FEF,F
0830:  BRA    0812
0832:  RETURN 0
.................... /* --- BEGIN: changes required for bootloader ------------------------------ */ 
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* map reset vector and interrupt vector                                     */ 
.................... /* 0x000-0x7FF is used by the bootloader. The bootloader maps the original   */ 
.................... /* reset vecotr (0x000) to 0x800 and the reset vector (0x008) to 0x800.      */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... #build (reset=0x800, interrupt=0x808) 
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* reserve boot block area                                                   */ 
.................... /* This memory range is used by the bootloader, so the application must not  */ 
.................... /* use this area.                                                            */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... #org 0, 0x7FF {} 
....................  
.................... /* --- END: changes required for bootloader -------------------------------- */ 
....................  
....................  
....................  
....................  
....................  
....................  
.................... #byte PORTB = 0xF81 
.................... #byte PORTD = 0xF83 
....................  
.................... int8 leds[8] = { 
....................   1, 
....................   2, 
....................   4, 
....................   8, 
....................   16, 
....................   32, 
....................   64, 
....................   128 
.................... }; 
....................  
.................... void pattern2(void); 
.................... void pattern3(void); 
....................  
.................... void main() 
*
0896:  CLRF   FF8
0898:  BSF    FD0.7
089A:  MOVF   FC1,W
089C:  ANDLW  C0
089E:  IORLW  0F
08A0:  MOVWF  FC1
08A2:  MOVLW  07
08A4:  MOVWF  FB4
08A6:  MOVLW  01
08A8:  MOVWF  04
08AA:  MOVLW  02
08AC:  MOVWF  05
08AE:  MOVLW  04
08B0:  MOVWF  06
08B2:  MOVLW  08
08B4:  MOVWF  07
08B6:  MOVLW  10
08B8:  MOVWF  08
08BA:  MOVLW  20
08BC:  MOVWF  09
08BE:  MOVLW  40
08C0:  MOVWF  0A
08C2:  MOVLW  80
08C4:  MOVWF  0B
....................  
.................... { 
....................   set_tris_b(0x00); 
08C6:  MOVLW  00
08C8:  MOVWF  F93
....................   set_tris_d(0xff); 
08CA:  MOVLW  FF
08CC:  MOVWF  F95
....................  
....................   int a; 
....................   int b; 
....................   int i; 
....................   int m; 
....................  
....................   PORTB = 0x00; 
08CE:  CLRF   F81
....................   a = PORTD & 0xF0; 
08D0:  MOVF   F83,W
08D2:  ANDLW  F0
08D4:  MOVWF  0C
....................   a = a >> 4; 
08D6:  SWAPF  0C,F
08D8:  MOVLW  0F
08DA:  ANDWF  0C,F
....................  
....................   b = PORTD & 0x0F; 
08DC:  MOVF   F83,W
08DE:  ANDLW  0F
08E0:  MOVWF  0D
....................  
....................   while(TRUE) { 
....................      for (i = 0; i < a; i++) { 
08E2:  CLRF   0E
08E4:  MOVF   0C,W
08E6:  SUBWF  0E,W
08E8:  BC    090E
....................        PORTB = 0xff; 
08EA:  SETF   F81
....................        delay_ms(500); 
08EC:  MOVLW  02
08EE:  MOVWF  10
08F0:  MOVLW  FA
08F2:  MOVWF  12
08F4:  RCALL  0808
08F6:  DECFSZ 10,F
08F8:  BRA    08F0
....................        PORTB = 0x00; 
08FA:  CLRF   F81
....................        delay_ms(500); 
08FC:  MOVLW  02
08FE:  MOVWF  10
0900:  MOVLW  FA
0902:  MOVWF  12
0904:  RCALL  0808
0906:  DECFSZ 10,F
0908:  BRA    0900
090A:  INCF   0E,F
090C:  BRA    08E4
....................      } 
....................     
....................      for (m = 0; m < b; m++) { 
090E:  CLRF   0F
0910:  MOVF   0D,W
0912:  SUBWF  0F,W
0914:  BC    091E
....................        pattern2(); 
0916:  BRA    0834
....................        pattern3(); 
0918:  BRA    0866
091A:  INCF   0F,F
091C:  BRA    0910
....................     
....................      } 
091E:  BRA    08E2
....................   } 
.................... } 
....................  
0920:  SLEEP 
.................... void pattern2(void) { // O?inioo?iaoio pattern2           
....................   int8 i; 
....................   for (i = 8; i > 0; i--) { 
*
0834:  MOVLW  08
0836:  MOVWF  10
0838:  MOVF   10,F
083A:  BZ    0862
....................     PORTB = leds[i - 1]; 
083C:  MOVLW  01
083E:  SUBWF  10,W
0840:  CLRF   03
0842:  ADDLW  04
0844:  MOVWF  FE9
0846:  MOVLW  00
0848:  ADDWFC 03,W
084A:  MOVWF  FEA
084C:  MOVFF  FEF,F81
....................     delay_ms(500); 
0850:  MOVLW  02
0852:  MOVWF  11
0854:  MOVLW  FA
0856:  MOVWF  12
0858:  RCALL  0808
085A:  DECFSZ 11,F
085C:  BRA    0854
085E:  DECF   10,F
0860:  BRA    0838
....................   } 
0862:  GOTO   0918 (RETURN)
.................... } 
....................  
.................... void pattern3(void) { 
....................   int8 i; 
....................   for (i = 0; i < 8; i++) { 
0866:  CLRF   10
0868:  MOVF   10,W
086A:  SUBLW  07
086C:  BNC   0892
....................     PORTB = leds[i]; 
086E:  CLRF   03
0870:  MOVF   10,W
0872:  ADDLW  04
0874:  MOVWF  FE9
0876:  MOVLW  00
0878:  ADDWFC 03,W
087A:  MOVWF  FEA
087C:  MOVFF  FEF,F81
....................     delay_ms(500); 
0880:  MOVLW  02
0882:  MOVWF  11
0884:  MOVLW  FA
0886:  MOVWF  12
0888:  RCALL  0808
088A:  DECFSZ 11,F
088C:  BRA    0884
088E:  INCF   10,F
0890:  BRA    0868
....................   } 
0892:  GOTO   091A (RETURN)
.................... } 

Configuration Fuses:
   Word  1: 0E24   PLL5 CPUDIV1 USBDIV HSPLL NOFCMEN NOIESO
   Word  2: 1E3F   NOPUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8000   CCP2B3 NOPBADEN NOLPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP ICSP1 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: A00F   NOWRT NOWRTC WRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
