CCS PCH C Compiler, Version 5.011, 5967               15-Απρ-21 13:08

               Filename:   F:\Embedded Systems\Εργαστηριο\Εργαστήριο 4\Ask1\ASk1.lst

               ROM used:   242 bytes (1%)
                           Largest free fragment is 32522
               RAM used:   23 (1%) at main() level
                           24 (1%) worst case
               Stack used: 2 locations (1 in main + 1 for interrupts)
               Stack size: 31

*
0000:  GOTO   00DE
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  FF2.5
004A:  GOTO   0054
004E:  BTFSC  FF2.2
0050:  GOTO   0096
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... #include <main_.h> 
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
....................  
.................... #list 
....................  
.................... #device adc=10 
....................  
.................... #FUSES NOWDT                     //No Watch Dog Timer 
.................... #FUSES WDT32768                    //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES HSPLL                     //High Speed Crystal/Resonator with PLL enabled 
.................... #FUSES NOPROTECT                 //Code not protected from reading 
.................... #FUSES BROWNOUT                //No brownout reset 
.................... //#FUSES BORV20                    //Brownout reset at 2.0V 
.................... #FUSES NOPUT                     //No Power Up Timer 
.................... #FUSES NOCPD                     //No EE protection 
.................... #FUSES STVREN                    //Stack full/underflow will cause reset 
.................... #FUSES NODEBUG                   //No Debug mode for ICD 
.................... #FUSES NOLVP                     //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                     //Program memory not write protected 
.................... #FUSES NOWRTD                    //Data EEPROM not write protected 
.................... #FUSES NOIESO                      //Internal External Switch Over mode enabled 
.................... #FUSES NOFCMEN                     //Fail-safe clock monitor enabled 
.................... #FUSES NOPBADEN                 ///PORTB pins are configured as analog input channels on RESET 
.................... #FUSES NOWRTC                    //configuration not registers write protected 
.................... #FUSES NOWRTB                    //Boot block not write protected 
.................... #FUSES NOEBTR                    //Memory not protected from table reads 
.................... #FUSES NOEBTRB                   //Boot block not protected from table reads 
.................... #FUSES NOCPB                     //No Boot Block code protection 
.................... #FUSES MCLR                      //Master Clear pin enabled 
.................... #FUSES NOLPT1OSC                   //Timer1 configured for low-power operation 
.................... #FUSES NOXINST                   //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... #FUSES PLL5                      //Divide By 12(48MHz oscillator input) 
.................... #FUSES CPUDIV1                   //System Clock by 2 
.................... #FUSES USBDIV                    //USB clock source comes from PLL divide by 2 
.................... #FUSES VREGEN                    //USB voltage regulator enabled 
.................... //#FUSES ICPRT                     //ICPRT enabled 
.................... #FUSES WRTB 
.................... #FUSES NOICPRT  
.................... #FUSES NOLPT1OSC 
.................... #FUSES CCP2B3  
.................... #FUSES NOCPB 
.................... #FUSES NOCPD 
.................... #FUSES NOWRTC 
.................... #FUSES NOWRTD 
.................... #FUSES NOEBTR 
.................... #FUSES NOEBTRB               
....................  
.................... /* systm clock is 48 MHz */ 
.................... #use delay(clock=48000000,RESTART_WDT) 
.................... /* --- BEGIN: changes required for bootloader ------------------------------ */ 
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* map reset vector and interrupt vector                                     */ 
.................... /* 0x000-0x7FF is used by the bootloader. The bootloader maps the original   */ 
.................... /* reset vecotr (0x000) to 0x800 and the reset vector (0x008) to 0x800.      */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... //#build (reset=0x800, interrupt=0x808) 
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* reserve boot block area                                                   */ 
.................... /* This memory range is used by the bootloader, so the application must not  */ 
.................... /* use this area.                                                            */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... //#org 0, 0x7FF {} 
....................  
.................... /* --- END: changes required for bootloader -------------------------------- */ 
....................  
....................  
....................  
....................  
....................  
....................  
.................... #byte PORTB=0xF81 
....................  
.................... int8 counter; 
....................  
....................  
....................  
.................... void timer0_int(void); 
.................... void init(void); 
....................  
....................  
....................  
.................... void main() 
*
00DE:  CLRF   FF8
00E0:  BCF    FD0.7
00E2:  BSF    07.7
00E4:  MOVF   FC1,W
00E6:  ANDLW  C0
00E8:  IORLW  0F
00EA:  MOVWF  FC1
00EC:  MOVLW  07
00EE:  MOVWF  FB4
.................... { 
.................... init(); 
00F0:  BRA    00C2
.................... while (1) 
.................... { 
00F2:  BRA    00F2
....................  
.................... }} 
....................  
00F4:  SLEEP 
....................  
....................  
.................... void  init (void) 
.................... { 
....................      
....................     set_tris_b(0xff); 
*
00C2:  MOVLW  FF
00C4:  MOVWF  F93
....................     counter=0; 
00C6:  CLRF   16
....................     setup_timer_0(T0_INTERNAL|T0_DIV_128); 
00C8:  MOVLW  86
00CA:  MOVWF  FD5
....................     set_timer0(53817); 
00CC:  MOVLW  D2
00CE:  MOVWF  FD7
00D0:  MOVLW  39
00D2:  MOVWF  FD6
....................     enable_interrupts(INT_TIMER0); 
00D4:  BSF    FF2.5
....................     enable_interrupts(GLOBAL); 
00D6:  MOVLW  C0
00D8:  IORWF  FF2,F
00DA:  GOTO   00F2 (RETURN)
.................... } 
....................  
....................  
.................... #INT_TIMER0 
.................... void timer0_int(){ 
....................     set_timer0(53817); 
*
0096:  MOVLW  D2
0098:  MOVWF  FD7
009A:  MOVLW  39
009C:  MOVWF  FD6
....................     counter++; 
009E:  INCF   16,F
....................     if(!input_state(PIN_B1)) 
00A0:  BTFSC  F81.1
00A2:  BRA    00B4
....................     { 
....................         output_low(PIN_B7); 
00A4:  BCF    F93.7
00A6:  BCF    F8A.7
....................             //anavei to RB4  
....................         if(counter%2==0) 
00A8:  MOVF   16,W
00AA:  ANDLW  01
00AC:  BNZ   00B2
....................         { 
....................         output_toggle(PIN_B4); 
00AE:  BCF    F93.4
00B0:  BTG    F8A.4
....................          
....................         } 
....................     } 
00B2:  BRA    00BC
....................     else{ 
....................         output_low(PIN_B4); 
00B4:  BCF    F93.4
00B6:  BCF    F8A.4
....................         output_toggle(PIN_B7); 
00B8:  BCF    F93.7
00BA:  BTG    F8A.7
....................     } 
00BC:  BCF    FF2.2
00BE:  GOTO   0054
.................... } 
....................  

Configuration Fuses:
   Word  1: 0E24   PLL5 CPUDIV1 USBDIV HSPLL NOFCMEN NOIESO
   Word  2: 1E3F   NOPUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8000   CCP2B3 NOPBADEN NOLPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP ICSP1 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: A00F   NOWRT NOWRTC WRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
