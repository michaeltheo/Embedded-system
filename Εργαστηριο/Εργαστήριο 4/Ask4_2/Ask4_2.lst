CCS PCH C Compiler, Version 5.011, 5967               21-Απρ-21 18:11

               Filename:   F:\Embedded Systems\Εργαστηριο\Εργαστήριο 4\Ask4_2\Ask4_2.lst

               ROM used:   304 bytes (1%)
                           Largest free fragment is 32460
               RAM used:   27 (1%) at main() level
                           27 (1%) worst case
               Stack used: 2 locations (1 in main + 1 for interrupts)
               Stack size: 31

*
0000:  GOTO   0108
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  FF2.5
004A:  GOTO   0054
004E:  BTFSC  FF2.2
0050:  GOTO   0096
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... // 0.25 hz = 4sec = 4000ms  
.................... // 1hz = 1sec 1000ms  
.................... // 2hz = 0.5sec 500ms 
.................... // 4hz = 0.25sec 250ms 
.................... // 10hz=0.1 100ms  
....................  
.................... // pernoume xrono diakopis xrono mikrotero tou 100 
.................... // pou dierei oles ti periodous px 50ms 
....................  
.................... // gia 50 ms  
.................... // 10hz counter na einai 2 
.................... // 4hz counter na einai 5 
.................... // 2hz counter na einai 10 
.................... // 1hz counter na einai 20 
.................... // 0.25hz counter na einai 80 
....................  
.................... // set timer 
.................... // 50000000=83.333*128*(65536-x) => x=60848.5 
....................  
.................... #include "main_.h" 
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
....................  
.................... #list 
....................  
.................... #device adc=10 
....................  
.................... #FUSES NOWDT                     //No Watch Dog Timer 
.................... #FUSES WDT32768                    //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES HSPLL                     //High Speed Crystal/Resonator with PLL enabled 
.................... #FUSES NOPROTECT                 //Code not protected from reading 
.................... #FUSES BROWNOUT                //No brownout reset 
.................... //#FUSES BORV20                    //Brownout reset at 2.0V 
.................... #FUSES NOPUT                     //No Power Up Timer 
.................... #FUSES NOCPD                     //No EE protection 
.................... #FUSES STVREN                    //Stack full/underflow will cause reset 
.................... #FUSES NODEBUG                   //No Debug mode for ICD 
.................... #FUSES NOLVP                     //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                     //Program memory not write protected 
.................... #FUSES NOWRTD                    //Data EEPROM not write protected 
.................... #FUSES NOIESO                      //Internal External Switch Over mode enabled 
.................... #FUSES NOFCMEN                     //Fail-safe clock monitor enabled 
.................... #FUSES NOPBADEN                 ///PORTB pins are configured as analog input channels on RESET 
.................... #FUSES NOWRTC                    //configuration not registers write protected 
.................... #FUSES NOWRTB                    //Boot block not write protected 
.................... #FUSES NOEBTR                    //Memory not protected from table reads 
.................... #FUSES NOEBTRB                   //Boot block not protected from table reads 
.................... #FUSES NOCPB                     //No Boot Block code protection 
.................... #FUSES MCLR                      //Master Clear pin enabled 
.................... #FUSES NOLPT1OSC                   //Timer1 configured for low-power operation 
.................... #FUSES NOXINST                   //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... #FUSES PLL5                      //Divide By 12(48MHz oscillator input) 
.................... #FUSES CPUDIV1                   //System Clock by 2 
.................... #FUSES USBDIV                    //USB clock source comes from PLL divide by 2 
.................... #FUSES VREGEN                    //USB voltage regulator enabled 
.................... //#FUSES ICPRT                     //ICPRT enabled 
.................... #FUSES WRTB 
.................... #FUSES NOICPRT  
.................... #FUSES NOLPT1OSC 
.................... #FUSES CCP2B3  
.................... #FUSES NOCPB 
.................... #FUSES NOCPD 
.................... #FUSES NOWRTC 
.................... #FUSES NOWRTD 
.................... #FUSES NOEBTR 
.................... #FUSES NOEBTRB               
....................  
.................... /* systm clock is 48 MHz */ 
.................... #use delay(clock=48000000,RESTART_WDT) 
.................... /* --- BEGIN: changes required for bootloader ------------------------------ */ 
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* map reset vector and interrupt vector                                     */ 
.................... /* 0x000-0x7FF is used by the bootloader. The bootloader maps the original   */ 
.................... /* reset vecotr (0x000) to 0x800 and the reset vector (0x008) to 0x800.      */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... //#build (reset=0x800, interrupt=0x808) 
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* reserve boot block area                                                   */ 
.................... /* This memory range is used by the bootloader, so the application must not  */ 
.................... /* use this area.                                                            */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... //#org 0, 0x7FF {} 
....................  
.................... /* --- END: changes required for bootloader -------------------------------- */ 
....................  
....................  
....................  
....................  
....................  
....................  
.................... #byte PORTB=0xF81 
....................  
.................... int8 counter0_25=80; 
.................... int8 counter1=20; 
.................... int8 counter2=10; 
.................... int8 counter4=5; 
.................... int8 counter10=2; 
....................  
....................  
.................... void timer0_int(void); 
.................... void init(void); 
....................  
.................... void main() 
*
0108:  CLRF   FF8
010A:  BCF    FD0.7
010C:  BSF    07.7
010E:  MOVLW  50
0110:  MOVWF  16
0112:  MOVLW  14
0114:  MOVWF  17
0116:  MOVLW  0A
0118:  MOVWF  18
011A:  MOVLW  05
011C:  MOVWF  19
011E:  MOVLW  02
0120:  MOVWF  1A
0122:  MOVF   FC1,W
0124:  ANDLW  C0
0126:  IORLW  0F
0128:  MOVWF  FC1
012A:  MOVLW  07
012C:  MOVWF  FB4
.................... { 
.................... init(); 
012E:  BRA    00EA
.................... while (1) 
.................... { 
0130:  BRA    0130
....................  
.................... }} 
....................  
0132:  SLEEP 
....................  
.................... void  init (void) 
.................... { 
....................      
....................     set_tris_b(0x00); 
*
00EA:  MOVLW  00
00EC:  MOVWF  F93
....................     set_tris_d(0xff); 
00EE:  MOVLW  FF
00F0:  MOVWF  F95
....................     setup_timer_0(T0_INTERNAL|T0_DIV_128); 
00F2:  MOVLW  86
00F4:  MOVWF  FD5
....................     set_timer0(60848); 
00F6:  MOVLW  ED
00F8:  MOVWF  FD7
00FA:  MOVLW  B0
00FC:  MOVWF  FD6
....................     enable_interrupts(INT_TIMER0); 
00FE:  BSF    FF2.5
....................     enable_interrupts(GLOBAL); 
0100:  MOVLW  C0
0102:  IORWF  FF2,F
0104:  GOTO   0130 (RETURN)
.................... } 
....................  
.................... #INT_TIMER0 
.................... void timer0_int(){ 
....................     set_timer0(60848); 
*
0096:  MOVLW  ED
0098:  MOVWF  FD7
009A:  MOVLW  B0
009C:  MOVWF  FD6
....................     counter0_25--; 
009E:  DECF   16,F
....................     counter10--; 
00A0:  DECF   1A,F
....................     counter1--; 
00A2:  DECF   17,F
....................     counter2--; 
00A4:  DECF   18,F
....................     counter4--; 
00A6:  DECF   19,F
.................... if (counter0_25==0) 
00A8:  MOVF   16,F
00AA:  BNZ   00B4
.................... { 
....................     counter0_25=80; 
00AC:  MOVLW  50
00AE:  MOVWF  16
....................     output_toggle(PIN_B3); 
00B0:  BCF    F93.3
00B2:  BTG    F8A.3
....................     
.................... } 
.................... if (counter10==0) 
00B4:  MOVF   1A,F
00B6:  BNZ   00C0
.................... { 
....................     counter10=2; 
00B8:  MOVLW  02
00BA:  MOVWF  1A
....................     output_toggle(PIN_B7); 
00BC:  BCF    F93.7
00BE:  BTG    F8A.7
....................      
.................... } 
.................... if (counter1==0) 
00C0:  MOVF   17,F
00C2:  BNZ   00CC
.................... { 
....................     counter1=20; 
00C4:  MOVLW  14
00C6:  MOVWF  17
....................     output_toggle(PIN_B4); 
00C8:  BCF    F93.4
00CA:  BTG    F8A.4
....................     
.................... } 
.................... if (counter2==0) 
00CC:  MOVF   18,F
00CE:  BNZ   00D8
.................... { 
....................     counter2=10; 
00D0:  MOVLW  0A
00D2:  MOVWF  18
....................     output_toggle(PIN_B5); 
00D4:  BCF    F93.5
00D6:  BTG    F8A.5
....................     
.................... } 
.................... if (counter4==0) 
00D8:  MOVF   19,F
00DA:  BNZ   00E4
.................... { 
....................     counter4=5; 
00DC:  MOVLW  05
00DE:  MOVWF  19
....................     output_toggle(PIN_B6); 
00E0:  BCF    F93.6
00E2:  BTG    F8A.6
.................... } 
....................  
....................      
....................  
....................      
00E4:  BCF    FF2.2
00E6:  GOTO   0054
.................... } 

Configuration Fuses:
   Word  1: 0E24   PLL5 CPUDIV1 USBDIV HSPLL NOFCMEN NOIESO
   Word  2: 1E3F   NOPUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8000   CCP2B3 NOPBADEN NOLPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP ICSP1 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: A00F   NOWRT NOWRTC WRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
