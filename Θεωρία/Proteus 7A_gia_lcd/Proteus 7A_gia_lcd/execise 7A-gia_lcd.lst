CCS PCH C Compiler, Version 5.011, 17990               29-аПЯ-20 15:33

               Filename:   C:\Users\User\Dropbox\дипае\лахглата дипае\емсылатылема сустглата\╒СЙГСГ 7\Proteus 7A_gia_lcd\execise 7A-gia_lcd.lst

               ROM used:   496 bytes (2%)
                           Largest free fragment is 31440
               RAM used:   4 (0%) at main() level
                           8 (0%) worst case
               Stack used: 4 locations
               Stack size: 30

*
0000:  GOTO   01B0
.................... #include <main-proteus.h> 
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
0004:  DATA 45,4C
0006:  DATA 45,43
0008:  DATA 54,52
000A:  DATA 4F,4E
000C:  DATA 49,43
000E:  DATA 53,00
0010:  DATA 2A,2A
0012:  DATA 2A,2A
0014:  DATA 2A,00
*
0190:  TBLRD*+
0192:  MOVF   FF5,F
0194:  BZ    01AE
0196:  MOVFF  FF6,05
019A:  MOVFF  FF7,06
019E:  MOVFF  FF5,07
01A2:  BRA    0158
01A4:  MOVFF  05,FF6
01A8:  MOVFF  06,FF7
01AC:  BRA    0190
01AE:  RETURN 0
....................  
.................... #list 
....................  
.................... #DEVICE HIGH_INTS=TRUE 
....................  #device icd=2 
.................... #device adc=10 
....................  
.................... #FUSES NOWDT                     //No Watch Dog Timer 
.................... #FUSES WDT32768                    //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES HSPLL                     //High Speed Crystal/Resonator with PLL enabled 
.................... #FUSES NOPROTECT                 //Code not protected from reading 
.................... #FUSES BROWNOUT                //No brownout reset 
.................... //#FUSES BORV20                    //Brownout reset at 2.0V 
.................... #FUSES NOPUT                     //No Power Up Timer 
.................... #FUSES NOCPD                     //No EE protection 
.................... #FUSES STVREN                    //Stack full/underflow will cause reset 
.................... #FUSES NODEBUG                   //No Debug mode for ICD 
.................... #FUSES NOLVP                     //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                     //Program memory not write protected 
.................... #FUSES NOWRTD                    //Data EEPROM not write protected 
.................... #FUSES NOIESO                      //Internal External Switch Over mode enabled 
.................... #FUSES NOFCMEN                     //Fail-safe clock monitor enabled 
.................... #FUSES NOPBADEN                 ///PORTB pins are configured as analog input channels on RESET 
.................... #FUSES NOWRTC                    //configuration not registers write protected 
.................... #FUSES NOWRTB                    //Boot block not write protected 
.................... #FUSES NOEBTR                    //Memory not protected from table reads 
.................... #FUSES NOEBTRB                   //Boot block not protected from table reads 
.................... #FUSES NOCPB                     //No Boot Block code protection 
.................... #FUSES MCLR                      //Master Clear pin enabled 
.................... #FUSES NOLPT1OSC                   //Timer1 configured for low-power operation 
.................... #FUSES NOXINST                   //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... #FUSES PLL5                      //Divide By 12(48MHz oscillator input) 
.................... #FUSES CPUDIV1                   //System Clock by 2 
.................... #FUSES USBDIV                    //USB clock source comes from PLL divide by 2 
.................... #FUSES VREGEN                    //USB voltage regulator enabled 
.................... //#FUSES ICPRT                     //ICPRT enabled 
.................... #FUSES WRTB 
.................... #FUSES NOICPRT  
.................... #FUSES NOLPT1OSC 
.................... #FUSES CCP2B3  
.................... #FUSES NOCPB 
.................... #FUSES NOCPD 
.................... #FUSES NOWRTC 
.................... #FUSES NOWRTD 
.................... #FUSES NOEBTR 
.................... #FUSES NOEBTRB               
....................  
.................... /* systm clock is 48 MHz */ 
.................... #use delay(clock=48000000,RESTART_WDT) 
*
0048:  CLRF   FEA
004A:  MOVLW  08
004C:  MOVWF  FE9
004E:  MOVF   FEF,W
0050:  BZ    0072
0052:  MOVLW  0F
0054:  MOVWF  01
0056:  MOVLW  BF
0058:  MOVWF  00
005A:  CLRWDT
005C:  DECFSZ 00,F
005E:  BRA    005A
0060:  DECFSZ 01,F
0062:  BRA    0056
0064:  MOVLW  8F
0066:  MOVWF  00
0068:  DECFSZ 00,F
006A:  BRA    0068
006C:  CLRWDT
006E:  DECFSZ FEF,F
0070:  BRA    0052
0072:  RETURN 0
.................... /* --- BEGIN: changes required for bootloader ------------------------------ */ 
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* map reset vector and interrupt vector                                     */ 
.................... /* 0x000-0x7FF is used by the bootloader. The bootloader maps the original   */ 
.................... /* reset vecotr (0x000) to 0x800 and the reset vector (0x008) to 0x800.      */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... #build (reset=0x000, interrupt=0x008) 
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* reserve boot block area                                                   */ 
.................... /* This memory range is used by the bootloader, so the application must not  */ 
.................... /* use this area.                                                            */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... //#org 0  , 0x000 {} 
....................  
.................... /* --- END: changes required for bootloader -------------------------------- */ 
....................  
....................  
....................  
....................  
....................  
.................... #include <gia_lcd.h> 
.................... #define LCD_D4  PIN_B4 
.................... #define LCD_D5  PIN_B5 
.................... #define LCD_D6  PIN_B6 
.................... #define LCD_D7  PIN_B7 
.................... #define LCD_EN  PIN_B3 
.................... #define LCD_RS  PIN_B2 
.................... #define LINE_1  0x00 
.................... #define LINE_2  0x40 
.................... #define CLEAR_DISP  0x01 
....................  
.................... void LCD_Init ( void ); 
.................... void LCD_SetPosition ( unsigned int cX ); 
.................... void LCD_PutChar ( unsigned int cX ); 
.................... void LCD_PutCmd ( unsigned int cX ); 
.................... void LCD_PulseEnable ( void ); 
.................... void LCD_SetData ( unsigned int cX ); 
....................  
.................... // LCD FUNCTIONS ================================= 
....................  
.................... void LCD_Init ( void ) 
....................     { 
....................     LCD_SetData ( 0x00 ); 
*
00B8:  CLRF   08
00BA:  RCALL  0016
....................     delay_ms ( 200 );       // wait enough time after Vdd rise 
00BC:  MOVLW  C8
00BE:  MOVWF  08
00C0:  RCALL  0048
....................     output_low ( LCD_RS ); 
00C2:  BCF    F93.2
00C4:  BCF    F8A.2
....................     LCD_SetData ( 0x03 );   // init with specific nibbles to start 4-bit mode 
00C6:  MOVLW  03
00C8:  MOVWF  08
00CA:  RCALL  0016
....................     delay_ms (2); 
00CC:  MOVLW  02
00CE:  MOVWF  08
00D0:  RCALL  0048
....................     LCD_PulseEnable(); 
00D2:  RCALL  0074
....................     delay_ms (1); 
00D4:  MOVLW  01
00D6:  MOVWF  08
00D8:  RCALL  0048
....................     LCD_PulseEnable(); 
00DA:  RCALL  0074
....................     delay_ms (1); 
00DC:  MOVLW  01
00DE:  MOVWF  08
00E0:  RCALL  0048
....................     LCD_PulseEnable(); 
00E2:  RCALL  0074
....................     delay_ms (1); 
00E4:  MOVLW  01
00E6:  MOVWF  08
00E8:  RCALL  0048
....................     LCD_SetData ( 0x02 );   // set 4-bit interface 
00EA:  MOVLW  02
00EC:  MOVWF  08
00EE:  RCALL  0016
....................     delay_ms (1); 
00F0:  MOVLW  01
00F2:  MOVWF  08
00F4:  RCALL  0048
....................     LCD_PulseEnable();      // send dual nibbles hereafter, MSN first 
00F6:  RCALL  0074
....................     delay_ms (1); 
00F8:  MOVLW  01
00FA:  MOVWF  08
00FC:  RCALL  0048
....................     LCD_PutCmd ( 0x2C );    // function set (all lines, 5x7 characters) 
00FE:  MOVLW  2C
0100:  MOVWF  05
0102:  RCALL  008A
....................     delay_ms (1); 
0104:  MOVLW  01
0106:  MOVWF  08
0108:  RCALL  0048
....................     LCD_PutCmd ( 0x0C );    // display ON, cursor off, no blink 
010A:  MOVLW  0C
010C:  MOVWF  05
010E:  RCALL  008A
....................     delay_ms (1); 
0110:  MOVLW  01
0112:  MOVWF  08
0114:  RCALL  0048
....................     LCD_PutCmd ( 0x01 );    // clear display 
0116:  MOVLW  01
0118:  MOVWF  05
011A:  RCALL  008A
....................     delay_ms (1); 
011C:  MOVLW  01
011E:  MOVWF  08
0120:  RCALL  0048
....................     LCD_PutCmd ( 0x06 );    // entry mode set, increment 
0122:  MOVLW  06
0124:  MOVWF  05
0126:  RCALL  008A
....................     delay_ms (1); 
0128:  MOVLW  01
012A:  MOVWF  08
012C:  RCALL  0048
012E:  GOTO   01C6 (RETURN)
....................     } 
....................  
.................... void LCD_SetPosition ( unsigned int cX ) 
....................     { 
....................     // this subroutine works specifically for 4-bit Port A 
....................     LCD_SetData ( swap ( cX ) | 0x08 ); 
0132:  SWAPF  05,F
0134:  MOVF   05,W
0136:  IORLW  08
0138:  MOVWF  06
013A:  MOVWF  08
013C:  RCALL  0016
....................     LCD_PulseEnable(); 
013E:  RCALL  0074
....................     delay_ms (1); 
0140:  MOVLW  01
0142:  MOVWF  08
0144:  RCALL  0048
....................     LCD_SetData ( swap ( cX ) ); 
0146:  SWAPF  05,F
0148:  MOVFF  05,08
014C:  RCALL  0016
....................     LCD_PulseEnable(); 
014E:  RCALL  0074
....................     delay_ms (1); 
0150:  MOVLW  01
0152:  MOVWF  08
0154:  RCALL  0048
0156:  RETURN 0
....................     } 
....................  
.................... void LCD_PutChar ( unsigned int cX ) 
....................     { 
....................     // this subroutine works specifically for 4-bit Port A 
....................     output_high ( LCD_RS ); 
0158:  BCF    F93.2
015A:  BSF    F8A.2
....................     delay_ms (1); 
015C:  MOVLW  01
015E:  MOVWF  08
0160:  RCALL  0048
....................     LCD_SetData ( swap ( cX ) );     // send high nibble 
0162:  SWAPF  07,F
0164:  MOVFF  07,08
0168:  RCALL  0016
....................     LCD_PulseEnable(); 
016A:  RCALL  0074
....................     delay_ms (1); 
016C:  MOVLW  01
016E:  MOVWF  08
0170:  RCALL  0048
....................     LCD_SetData ( swap ( cX ) );     // send low nibble 
0172:  SWAPF  07,F
0174:  MOVFF  07,08
0178:  RCALL  0016
....................     LCD_PulseEnable(); 
017A:  RCALL  0074
....................     delay_us (1); 
017C:  CLRWDT
017E:  MOVLW  03
0180:  MOVWF  00
0182:  DECFSZ 00,F
0184:  BRA    0182
0186:  NOP   
....................     output_low ( LCD_RS ); 
0188:  BCF    F93.2
018A:  BCF    F8A.2
018C:  GOTO   01A4 (RETURN)
....................     } 
....................  
.................... void LCD_PutCmd ( unsigned int cX ) 
....................     { 
....................     // this subroutine works specifically for 4-bit Port A 
....................     LCD_SetData ( swap ( cX ) );     // send high nibble 
*
008A:  SWAPF  05,F
008C:  MOVFF  05,08
0090:  RCALL  0016
....................     delay_ms (1); 
0092:  MOVLW  01
0094:  MOVWF  08
0096:  RCALL  0048
....................     LCD_PulseEnable(); 
0098:  RCALL  0074
....................     delay_ms (1); 
009A:  MOVLW  01
009C:  MOVWF  08
009E:  RCALL  0048
....................     LCD_SetData ( swap ( cX ) );     // send low nibble 
00A0:  SWAPF  05,F
00A2:  MOVFF  05,08
00A6:  RCALL  0016
....................     delay_ms (1); 
00A8:  MOVLW  01
00AA:  MOVWF  08
00AC:  RCALL  0048
....................     LCD_PulseEnable(); 
00AE:  RCALL  0074
....................     delay_ms (1); 
00B0:  MOVLW  01
00B2:  MOVWF  08
00B4:  RCALL  0048
00B6:  RETURN 0
....................     } 
....................  
.................... void LCD_PulseEnable ( void ) 
....................     { 
....................     output_high ( LCD_EN ); 
*
0074:  BCF    F93.3
0076:  BSF    F8A.3
....................     delay_ms ( 1 ); 
0078:  MOVLW  01
007A:  MOVWF  08
007C:  RCALL  0048
....................     output_low ( LCD_EN ); 
007E:  BCF    F93.3
0080:  BCF    F8A.3
....................     delay_ms ( 1 ); 
0082:  MOVLW  01
0084:  MOVWF  08
0086:  RCALL  0048
0088:  RETURN 0
....................     } 
....................  
.................... void LCD_SetData ( unsigned int cX ) 
....................     { 
....................     output_bit ( LCD_D4, cX & 0x01 ); 
*
0016:  BTFSC  08.0
0018:  BRA    001E
001A:  BCF    F8A.4
001C:  BRA    0020
001E:  BSF    F8A.4
0020:  BCF    F93.4
....................     output_bit ( LCD_D5, cX & 0x02 ); 
0022:  BTFSC  08.1
0024:  BRA    002A
0026:  BCF    F8A.5
0028:  BRA    002C
002A:  BSF    F8A.5
002C:  BCF    F93.5
....................     output_bit ( LCD_D6, cX & 0x04 ); 
002E:  BTFSC  08.2
0030:  BRA    0036
0032:  BCF    F8A.6
0034:  BRA    0038
0036:  BSF    F8A.6
0038:  BCF    F93.6
....................     output_bit ( LCD_D7, cX & 0x08 ); 
003A:  BTFSC  08.3
003C:  BRA    0042
003E:  BCF    F8A.7
0040:  BRA    0044
0042:  BSF    F8A.7
0044:  BCF    F93.7
0046:  RETURN 0
....................     } 
....................      
....................  
....................  
.................... #byte PORTB=0xf81 // СТГМ ХщСГ 0xf81 ЕъМАИ О ЙАТАВЫЯГТчР ДЕДОЛщМЫМ  
....................                   //ТГР ПЭЯТАР б 
....................                    
.................... void main() { 
*
01B0:  CLRF   FF8
01B2:  BSF    FD0.7
01B4:  MOVF   FC1,W
01B6:  ANDLW  C0
01B8:  IORLW  0F
01BA:  MOVWF  FC1
01BC:  MOVLW  07
01BE:  MOVWF  FB4
....................              set_tris_b(0x00); 
01C0:  MOVLW  00
01C2:  MOVWF  F93
....................               
....................              LCD_Init();            
01C4:  BRA    00B8
....................              LCD_SetPosition(LINE_1+5); 
01C6:  MOVLW  05
01C8:  MOVWF  05
01CA:  RCALL  0132
....................              LCD_PutChar("ELECTRONICS"); 
01CC:  MOVLW  04
01CE:  MOVWF  FF6
01D0:  MOVLW  00
01D2:  MOVWF  FF7
01D4:  RCALL  0190
....................              LCD_SetPosition(LINE_2+4); 
01D6:  MOVLW  44
01D8:  MOVWF  05
01DA:  RCALL  0132
....................              LCD_PutChar("*****");  
01DC:  MOVLW  10
01DE:  MOVWF  FF6
01E0:  MOVLW  00
01E2:  MOVWF  FF7
01E4:  RCALL  0190
....................              delay_ms(100);            
01E6:  MOVLW  64
01E8:  MOVWF  08
01EA:  RCALL  0048
....................  
.................... while(TRUE) {}     // ТщКОР ТОУ ПЯОЦЯэЛЛАТОР, ЕЙТЕКЕъТАИ СУМЕВЧР щМАР БЯЭВОР 
01EC:  BRA    01EC
....................  
....................             }      // ЙКЕъМЕИ Г АЦЙЩКГ ТОУ main 
....................  
01EE:  BRA    01EE

Configuration Fuses:
   Word  1: 0E24   PLL5 CPUDIV1 USBDIV HSPLL NOFCMEN NOIESO
   Word  2: 1E39   NOPUT NOBROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8000   CCP2B3 NOPBADEN NOLPT1OSC MCLR
   Word  4: 0020   NOSTVREN NOLVP ICSP2 NOXINST DEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB

   Some fuses have been forced to be compatible with the ICD debugger.
