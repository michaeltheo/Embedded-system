CCS PCH C Compiler, Version 5.011, 17990               30-Νοε-18 19:29

               Filename:   C:\Users\User\Dropbox\MIKRO II\’σκηση 7\Proteus 7B\exercise 7B.lst

               ROM used:   586 bytes (2%)
                           Largest free fragment is 31350
               RAM used:   5 (0%) at main() level
                           15 (1%) worst case
               Stack used: 5 locations
               Stack size: 30

*
0000:  GOTO   01D2
.................... #include <main-proteus.h> 
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
0004:  CLRF   FF7
0006:  ADDLW  14
0008:  MOVWF  FF6
000A:  MOVLW  00
000C:  ADDWFC FF7,F
000E:  TBLRD*+
0010:  MOVF   FF5,W
0012:  RETURN 0
0014:  DATA 28,0C
0016:  DATA 01,06
0018:  DATA 0C,00
001A:  DATA 4D,49
001C:  DATA 43,52
001E:  DATA 4F,20
0020:  DATA 4C,41
0022:  DATA 42,00
0024:  DATA 2A,2A
0026:  DATA 2A,2A
0028:  DATA 2A,00
002A:  DATA 20,20
002C:  DATA 20,20
002E:  DATA 20,00
*
01B2:  TBLRD*+
01B4:  MOVF   FF5,F
01B6:  BZ    01D0
01B8:  MOVFF  FF6,05
01BC:  MOVFF  FF7,06
01C0:  MOVFF  FF5,07
01C4:  BRA    016E
01C6:  MOVFF  05,FF6
01CA:  MOVFF  06,FF7
01CE:  BRA    01B2
01D0:  RETURN 0
....................  
.................... #list 
....................  
.................... #DEVICE HIGH_INTS=TRUE 
....................  #device icd=2 
.................... #device adc=10 
....................  
.................... #FUSES NOWDT                     //No Watch Dog Timer 
.................... #FUSES WDT32768                    //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES HSPLL                     //High Speed Crystal/Resonator with PLL enabled 
.................... #FUSES NOPROTECT                 //Code not protected from reading 
.................... #FUSES BROWNOUT                //No brownout reset 
.................... //#FUSES BORV20                    //Brownout reset at 2.0V 
.................... #FUSES NOPUT                     //No Power Up Timer 
.................... #FUSES NOCPD                     //No EE protection 
.................... #FUSES STVREN                    //Stack full/underflow will cause reset 
.................... #FUSES NODEBUG                   //No Debug mode for ICD 
.................... #FUSES NOLVP                     //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                     //Program memory not write protected 
.................... #FUSES NOWRTD                    //Data EEPROM not write protected 
.................... #FUSES NOIESO                      //Internal External Switch Over mode enabled 
.................... #FUSES NOFCMEN                     //Fail-safe clock monitor enabled 
.................... #FUSES NOPBADEN                 ///PORTB pins are configured as analog input channels on RESET 
.................... #FUSES NOWRTC                    //configuration not registers write protected 
.................... #FUSES NOWRTB                    //Boot block not write protected 
.................... #FUSES NOEBTR                    //Memory not protected from table reads 
.................... #FUSES NOEBTRB                   //Boot block not protected from table reads 
.................... #FUSES NOCPB                     //No Boot Block code protection 
.................... #FUSES MCLR                      //Master Clear pin enabled 
.................... #FUSES NOLPT1OSC                   //Timer1 configured for low-power operation 
.................... #FUSES NOXINST                   //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... #FUSES PLL5                      //Divide By 12(48MHz oscillator input) 
.................... #FUSES CPUDIV1                   //System Clock by 2 
.................... #FUSES USBDIV                    //USB clock source comes from PLL divide by 2 
.................... #FUSES VREGEN                    //USB voltage regulator enabled 
.................... //#FUSES ICPRT                     //ICPRT enabled 
.................... #FUSES WRTB 
.................... #FUSES NOICPRT  
.................... #FUSES NOLPT1OSC 
.................... #FUSES CCP2B3  
.................... #FUSES NOCPB 
.................... #FUSES NOCPD 
.................... #FUSES NOWRTC 
.................... #FUSES NOWRTD 
.................... #FUSES NOEBTR 
.................... #FUSES NOEBTRB               
....................  
.................... /* systm clock is 48 MHz */ 
.................... #use delay(clock=48000000,RESTART_WDT) 
*
0030:  CLRF   FEA
0032:  MOVLW  08
0034:  MOVWF  FE9
0036:  MOVF   FEF,W
0038:  BZ    005A
003A:  MOVLW  0F
003C:  MOVWF  01
003E:  MOVLW  BF
0040:  MOVWF  00
0042:  CLRWDT
0044:  DECFSZ 00,F
0046:  BRA    0042
0048:  DECFSZ 01,F
004A:  BRA    003E
004C:  MOVLW  8F
004E:  MOVWF  00
0050:  DECFSZ 00,F
0052:  BRA    0050
0054:  CLRWDT
0056:  DECFSZ FEF,F
0058:  BRA    003A
005A:  RETURN 0
.................... /* --- BEGIN: changes required for bootloader ------------------------------ */ 
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* map reset vector and interrupt vector                                     */ 
.................... /* 0x000-0x7FF is used by the bootloader. The bootloader maps the original   */ 
.................... /* reset vecotr (0x000) to 0x800 and the reset vector (0x008) to 0x800.      */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... #build (reset=0x000, interrupt=0x008) 
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* reserve boot block area                                                   */ 
.................... /* This memory range is used by the bootloader, so the application must not  */ 
.................... /* use this area.                                                            */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... //#org 0  , 0x000 {} 
....................  
.................... /* --- END: changes required for bootloader -------------------------------- */ 
....................  
....................  
....................  
....................  
....................  
.................... #include <flex_lcd-proteus.h> // το h αρχείο του προγράμματος οδήγησης της οθόνης θα  
.................... //--------------------------------------------------- 
.................... #define LCD_DB4   PIN_B4 
.................... #define LCD_DB5   PIN_B5 
.................... #define LCD_DB6   PIN_B6 
.................... #define LCD_DB7   PIN_B7 
....................  
.................... #define LCD_E      PIN_B3 
.................... #define LCD_RS     PIN_B2 
.................... #define LCD_RW     PIN_B1 
.................... #define lcd_type 2        // 0=5x7, 1=5x10, 2=2 lines 
.................... #define lcd_line_two 0x40 // LCD RAM address for the 2nd line 
.................... int8 const LCD_INIT_STRING[4] = 
.................... { 
....................  0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots 
....................  0xc,                    // Display on 
....................  1,                      // Clear display 
....................  6                       // Increment cursor 
....................  }; 
.................... //================================================================= 
.................... void lcd_send_nibble(int8 nibble); 
.................... void lcd_send_byte(int8 address, int8 n); 
.................... void lcd_init(void); 
.................... void lcd_gotoxy(int8 x, int8 y); 
.................... void lcd_putc(char c); 
.................... //================================================================= 
.................... //------------------------------------------------------------- 
.................... void lcd_send_nibble(int8 nibble) 
.................... { 
.................... // Note:  !! converts an integer expression 
.................... // to a boolean (1 or 0). 
....................  output_bit(LCD_DB4, !!(nibble & 1)); 
005C:  BTFSC  0F.0
005E:  BRA    0064
0060:  BCF    F8A.4
0062:  BRA    0066
0064:  BSF    F8A.4
0066:  BCF    F93.4
....................  output_bit(LCD_DB5, !!(nibble & 2));  
0068:  BTFSC  0F.1
006A:  BRA    0070
006C:  BCF    F8A.5
006E:  BRA    0072
0070:  BSF    F8A.5
0072:  BCF    F93.5
....................  output_bit(LCD_DB6, !!(nibble & 4));    
0074:  BTFSC  0F.2
0076:  BRA    007C
0078:  BCF    F8A.6
007A:  BRA    007E
007C:  BSF    F8A.6
007E:  BCF    F93.6
....................  output_bit(LCD_DB7, !!(nibble & 8));    
0080:  BTFSC  0F.3
0082:  BRA    0088
0084:  BCF    F8A.7
0086:  BRA    008A
0088:  BSF    F8A.7
008A:  BCF    F93.7
....................  
....................  delay_cycles(20); 
008C:  MOVLW  06
008E:  MOVWF  00
0090:  DECFSZ 00,F
0092:  BRA    0090
0094:  NOP   
....................  output_high(LCD_E); 
0096:  BCF    F93.3
0098:  BSF    F8A.3
....................  delay_us(50); 
009A:  CLRWDT
009C:  MOVLW  C7
009E:  MOVWF  00
00A0:  DECFSZ 00,F
00A2:  BRA    00A0
00A4:  NOP   
....................  output_low(LCD_E); 
00A6:  BCF    F93.3
00A8:  BCF    F8A.3
00AA:  RETURN 0
.................... } 
....................  
.................... //----------------------------------- 
.................... // This sub-routine is only called by lcd_read_byte(). 
.................... // It's not a stand-alone routine.  For example, the 
.................... // R/W signal is set high by lcd_read_byte() before 
.................... // this routine is called.      
....................  
....................  
.................... //---------------------------------------- 
.................... // Send a byte to the LCD. 
.................... void lcd_send_byte(int8 address, int8 n) 
.................... { 
.................... output_low(LCD_RS); 
00AC:  BCF    F93.2
00AE:  BCF    F8A.2
....................  
.................... if(address) 
00B0:  MOVF   0C,F
00B2:  BZ    00BA
....................    output_high(LCD_RS); 
00B4:  BCF    F93.2
00B6:  BSF    F8A.2
00B8:  BRA    00BE
.................... else 
....................    output_low(LCD_RS); 
00BA:  BCF    F93.2
00BC:  BCF    F8A.2
....................       
....................  delay_cycles(10); 
00BE:  MOVLW  02
00C0:  MOVWF  00
00C2:  DECFSZ 00,F
00C4:  BRA    00C2
00C6:  BRA    00C8
00C8:  NOP   
....................  
.................... output_low(LCD_E); 
00CA:  BCF    F93.3
00CC:  BCF    F8A.3
....................  
.................... lcd_send_nibble(n >> 4); 
00CE:  SWAPF  0D,W
00D0:  MOVWF  0E
00D2:  MOVLW  0F
00D4:  ANDWF  0E,F
00D6:  MOVFF  0E,0F
00DA:  RCALL  005C
.................... lcd_send_nibble(n & 0xf); 
00DC:  MOVF   0D,W
00DE:  ANDLW  0F
00E0:  MOVWF  0E
00E2:  MOVWF  0F
00E4:  RCALL  005C
00E6:  RETURN 0
.................... } 
....................  
.................... //---------------------------- 
.................... void lcd_init(void) 
.................... { 
.................... int8 i; 
....................  
.................... output_low(LCD_RS); 
00E8:  BCF    F93.2
00EA:  BCF    F8A.2
....................  
.................... output_low(LCD_E); 
00EC:  BCF    F93.3
00EE:  BCF    F8A.3
.................... output_low(LCD_RW);			 
00F0:  BCF    F93.1
00F2:  BCF    F8A.1
.................... delay_ms(10); 
00F4:  MOVLW  0A
00F6:  MOVWF  08
00F8:  RCALL  0030
....................  
.................... for(i=0 ;i < 3; i++) 
00FA:  CLRF   05
00FC:  MOVF   05,W
00FE:  SUBLW  02
0100:  BNC   0112
....................    { 
....................     lcd_send_nibble(0x03); 
0102:  MOVLW  03
0104:  MOVWF  0F
0106:  RCALL  005C
....................     delay_ms(2); 
0108:  MOVLW  02
010A:  MOVWF  08
010C:  RCALL  0030
010E:  INCF   05,F
0110:  BRA    00FC
....................    } 
....................  
.................... lcd_send_nibble(0x02); 
0112:  MOVLW  02
0114:  MOVWF  0F
0116:  RCALL  005C
....................  
.................... for(i=0; i < sizeof(LCD_INIT_STRING); i++) 
0118:  CLRF   05
011A:  MOVF   05,W
011C:  SUBLW  03
011E:  BNC   0148
....................    { 
....................     lcd_send_byte(0, LCD_INIT_STRING[i]); 
0120:  CLRF   03
0122:  MOVF   05,W
0124:  MOVFF  FF2,06
0128:  BCF    FF2.6
012A:  BCF    FF2.7
012C:  RCALL  0004
012E:  BTFSC  06.6
0130:  BSF    FF2.6
0132:  BTFSC  06.7
0134:  BSF    FF2.7
0136:  MOVWF  06
0138:  CLRF   0C
013A:  MOVWF  0D
013C:  RCALL  00AC
....................     
....................     // If the R/W signal is not used, then 
....................     // the busy bit can't be polled.  One of 
....................     // the init commands takes longer than 
....................     // the hard-coded delay of 60 us, so in 
....................     // that case, lets just do a 5 ms delay 
....................     // after all four of them. 
....................     
....................     delay_ms(1); 
013E:  MOVLW  01
0140:  MOVWF  08
0142:  RCALL  0030
0144:  INCF   05,F
0146:  BRA    011A
....................     } 
0148:  GOTO   01E4 (RETURN)
....................  
.................... } 
....................  
.................... //---------------------------- 
....................  
.................... void lcd_gotoxy(int8 x, int8 y) 
.................... { 
.................... int8 address; 
....................  
.................... if(y != 1) 
014C:  DECFSZ 09,W
014E:  BRA    0152
0150:  BRA    0158
....................    address = lcd_line_two; 
0152:  MOVLW  40
0154:  MOVWF  0A
0156:  BRA    015A
.................... else 
....................    address=0; 
0158:  CLRF   0A
....................  
.................... address += x-1; 
015A:  MOVLW  01
015C:  SUBWF  08,W
015E:  ADDWF  0A,F
.................... lcd_send_byte(0, 0x80 | address); 
0160:  MOVF   0A,W
0162:  IORLW  80
0164:  MOVWF  0B
0166:  CLRF   0C
0168:  MOVWF  0D
016A:  RCALL  00AC
016C:  RETURN 0
.................... } 
....................  
.................... //----------------------------- 
.................... void lcd_putc(char c) 
.................... { 
....................  switch(c) 
016E:  MOVF   07,W
0170:  XORLW  0C
0172:  BZ    017E
0174:  XORLW  06
0176:  BZ    018E
0178:  XORLW  02
017A:  BZ    019A
017C:  BRA    01A4
....................    { 
....................     case '\f': 
....................       lcd_send_byte(0,1); 
017E:  CLRF   0C
0180:  MOVLW  01
0182:  MOVWF  0D
0184:  RCALL  00AC
....................       delay_ms(1); 
0186:  MOVLW  01
0188:  MOVWF  08
018A:  RCALL  0030
....................       break; 
018C:  BRA    01AE
....................     
....................     case '\n': 
....................        lcd_gotoxy(1,2); 
018E:  MOVLW  01
0190:  MOVWF  08
0192:  MOVLW  02
0194:  MOVWF  09
0196:  RCALL  014C
....................        break; 
0198:  BRA    01AE
....................     
....................     case '\b': 
....................        lcd_send_byte(0,0x10); 
019A:  CLRF   0C
019C:  MOVLW  10
019E:  MOVWF  0D
01A0:  RCALL  00AC
....................        break; 
01A2:  BRA    01AE
....................     
....................     default: 
....................        lcd_send_byte(1,c); 
01A4:  MOVLW  01
01A6:  MOVWF  0C
01A8:  MOVFF  07,0D
01AC:  RCALL  00AC
....................        break; 
....................    } 
01AE:  GOTO   01C6 (RETURN)
.................... } 
....................  
.................... //------------------------------ 
....................  
....................  
....................                      // πρέπει να είναι στον ίδιο φάκελο όπου θα αποθηκεύσουμε 
....................                      //το πρόγραμμα μας 
....................                      //θα πρέπει να γίνει έλεγχος και πιθανόν τροποποίηση  
....................                      // στις δηλώσεις #define LCD_DB4 PIN_B4 κλπ που 
....................                      // υπάρχουν στην flex_lcd.c. Με αυτές τις 
....................                     // δηλώσεις καθορίζεται σε ποιους ακροδέκτες του  
....................                      // μικροελεγκτή συνδέεται η οθόνη. 
....................  
.................... #byte PORTB=0xf81 // στην θέση 0xf81 είναι ο καταχωρητής δεδομένων  
....................                   //της πόρτας Β 
....................  
.................... void main() { 
*
01D2:  CLRF   FF8
01D4:  BSF    FD0.7
01D6:  MOVF   FC1,W
01D8:  ANDLW  C0
01DA:  IORLW  0F
01DC:  MOVWF  FC1
01DE:  MOVLW  07
01E0:  MOVWF  FB4
....................  
.................... lcd_init();      // αρχικοποίηση της οθόνης 
01E2:  BRA    00E8
....................  
.................... lcd_putc("\f"); // καθαρισμός της οθόνης 
01E4:  MOVLW  18
01E6:  MOVWF  FF6
01E8:  MOVLW  00
01EA:  MOVWF  FF7
01EC:  RCALL  01B2
....................  
.................... lcd_gotoxy(4,1); // η οθόνη θα εμφανίσει στην 4η θέση της 1ης γραμμής 
01EE:  MOVLW  04
01F0:  MOVWF  08
01F2:  MOVLW  01
01F4:  MOVWF  09
01F6:  RCALL  014C
....................  
.................... lcd_putc("MICRO LAB"); // εμφανίζεται το μήνυμα στην θέση που  
01F8:  MOVLW  1A
01FA:  MOVWF  FF6
01FC:  MOVLW  00
01FE:  MOVWF  FF7
0200:  RCALL  01B2
....................             // ορίσθηκε από την προηγούμενη εντολή 
....................  
.................... while(TRUE){ 
....................  
.................... lcd_gotoxy(5,2);  // η οθόνη θα εμφανίσει στην 5η θέση της 2ης γραμμής 
0202:  MOVLW  05
0204:  MOVWF  08
0206:  MOVLW  02
0208:  MOVWF  09
020A:  RCALL  014C
....................  
.................... lcd_putc("*****"); // εμφανίζονται οι αστερίσκοι στην θέση που καθορίστηκε 
020C:  MOVLW  24
020E:  MOVWF  FF6
0210:  MOVLW  00
0212:  MOVWF  FF7
0214:  RCALL  01B2
....................           // από την προηγούμενη εντολή 
....................  
.................... delay_ms(500);  // καθυστέρηση 500 χιλιοστά του δευτερολέπτου 
0216:  MOVLW  02
0218:  MOVWF  05
021A:  MOVLW  FA
021C:  MOVWF  08
021E:  RCALL  0030
0220:  DECFSZ 05,F
0222:  BRA    021A
....................  
.................... lcd_gotoxy(5,2);  // η οθόνη θα εμφανίσει πάλι στην 5η θέση της 2ης γραμμής 
0224:  MOVLW  05
0226:  MOVWF  08
0228:  MOVLW  02
022A:  MOVWF  09
022C:  RCALL  014C
....................  
.................... lcd_putc("     ");  // γράφονται 5 κενοί χαρακτήρες εκεί όπου είχαν γραφεί 
022E:  MOVLW  2A
0230:  MOVWF  FF6
0232:  MOVLW  00
0234:  MOVWF  FF7
0236:  RCALL  01B2
....................         // οι πέντε αστερίσκοι 
....................  
.................... delay_ms(500);  // αναμονή για 500 ms 
0238:  MOVLW  02
023A:  MOVWF  05
023C:  MOVLW  FA
023E:  MOVWF  08
0240:  RCALL  0030
0242:  DECFSZ 05,F
0244:  BRA    023C
0246:  BRA    0202
....................  
....................          } // κλείνει η αγκύλη του while(TRUE) 
....................  
....................    } // κλείνει η αγκύλη του main 
....................  
0248:  BRA    0248
....................  

Configuration Fuses:
   Word  1: 0E24   PLL5 CPUDIV1 USBDIV HSPLL NOFCMEN NOIESO
   Word  2: 1E39   NOPUT NOBROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8000   CCP2B3 NOPBADEN NOLPT1OSC MCLR
   Word  4: 0020   NOSTVREN NOLVP ICSP2 NOXINST DEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB

   Some fuses have been forced to be compatible with the ICD debugger.
