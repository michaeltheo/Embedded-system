CCS PCH C Compiler, Version 5.011, 5967               08-Απρ-21 01:05

               Filename:   F:\Embedded Systems\Θεωρία\Exercise Με Συστημα Συναργεμου\ask.lst

               ROM used:   312 bytes (1%)
                           Largest free fragment is 31620
               RAM used:   23 (1%) at main() level
                           25 (1%) worst case
               Stack used: 3 locations (1 in main + 2 for interrupts)
               Stack size: 30

*
0000:  GOTO   011E
*
0008:  NOP   
000A:  NOP   
000C:  NOP   
000E:  NOP   
0010:  NOP   
0012:  NOP   
0014:  NOP   
0016:  NOP   
0018:  MOVWF  04
001A:  MOVFF  FD8,05
001E:  MOVFF  FE0,06
0022:  MOVLB  0
0024:  MOVFF  FE9,0C
0028:  MOVFF  FEA,07
002C:  MOVFF  FE1,08
0030:  MOVFF  FE2,09
0034:  MOVFF  FD9,0A
0038:  MOVFF  FDA,0B
003C:  MOVFF  FF3,12
0040:  MOVFF  FF4,13
0044:  MOVFF  FFA,14
0048:  MOVFF  00,0E
004C:  MOVFF  01,0F
0050:  MOVFF  02,10
0054:  MOVFF  03,11
0058:  BTFSS  FF2.3
005A:  GOTO   0064
005E:  BTFSC  FF2.0
0060:  GOTO   00D2
0064:  MOVFF  0E,00
0068:  MOVFF  0F,01
006C:  MOVFF  10,02
0070:  MOVFF  11,03
0074:  MOVFF  0C,FE9
0078:  MOVFF  07,FEA
007C:  BSF    07.7
007E:  MOVFF  08,FE1
0082:  MOVFF  09,FE2
0086:  MOVFF  0A,FD9
008A:  MOVFF  0B,FDA
008E:  MOVFF  12,FF3
0092:  MOVFF  13,FF4
0096:  MOVFF  14,FFA
009A:  MOVF   04,W
009C:  MOVFF  06,FE0
00A0:  MOVFF  05,FD8
00A4:  RETFIE 0
.................... #include <main-proteus.h> 
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
....................  
.................... #list 
....................  
.................... #DEVICE HIGH_INTS=TRUE 
....................  #device icd=2 
.................... #device adc=10 
....................  
.................... #FUSES NOWDT                     //No Watch Dog Timer 
.................... #FUSES WDT32768                    //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES HSPLL                     //High Speed Crystal/Resonator with PLL enabled 
.................... #FUSES NOPROTECT                 //Code not protected from reading 
.................... #FUSES BROWNOUT                //No brownout reset 
.................... //#FUSES BORV20                    //Brownout reset at 2.0V 
.................... #FUSES NOPUT                     //No Power Up Timer 
.................... #FUSES NOCPD                     //No EE protection 
.................... #FUSES STVREN                    //Stack full/underflow will cause reset 
.................... #FUSES NODEBUG                   //No Debug mode for ICD 
.................... #FUSES NOLVP                     //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                     //Program memory not write protected 
.................... #FUSES NOWRTD                    //Data EEPROM not write protected 
.................... #FUSES NOIESO                      //Internal External Switch Over mode enabled 
.................... #FUSES NOFCMEN                     //Fail-safe clock monitor enabled 
.................... #FUSES NOPBADEN                 ///PORTB pins are configured as analog input channels on RESET 
.................... #FUSES NOWRTC                    //configuration not registers write protected 
.................... #FUSES NOWRTB                    //Boot block not write protected 
.................... #FUSES NOEBTR                    //Memory not protected from table reads 
.................... #FUSES NOEBTRB                   //Boot block not protected from table reads 
.................... #FUSES NOCPB                     //No Boot Block code protection 
.................... #FUSES MCLR                      //Master Clear pin enabled 
.................... #FUSES NOLPT1OSC                   //Timer1 configured for low-power operation 
.................... #FUSES NOXINST                   //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... #FUSES PLL5                      //Divide By 12(48MHz oscillator input) 
.................... #FUSES CPUDIV1                   //System Clock by 2 
.................... #FUSES USBDIV                    //USB clock source comes from PLL divide by 2 
.................... #FUSES VREGEN                    //USB voltage regulator enabled 
.................... //#FUSES ICPRT                     //ICPRT enabled 
.................... #FUSES WRTB 
.................... #FUSES NOICPRT  
.................... #FUSES NOLPT1OSC 
.................... #FUSES CCP2B3  
.................... #FUSES NOCPB 
.................... #FUSES NOCPD 
.................... #FUSES NOWRTC 
.................... #FUSES NOWRTD 
.................... #FUSES NOEBTR 
.................... #FUSES NOEBTRB               
....................  
.................... /* systm clock is 48 MHz */ 
.................... #use delay(clock=48000000,RESTART_WDT) 
00A6:  CLRF   FEA
00A8:  MOVLW  18
00AA:  MOVWF  FE9
00AC:  MOVF   FEF,W
00AE:  BZ    00D0
00B0:  MOVLW  0F
00B2:  MOVWF  01
00B4:  MOVLW  BF
00B6:  MOVWF  00
00B8:  CLRWDT
00BA:  DECFSZ 00,F
00BC:  BRA    00B8
00BE:  DECFSZ 01,F
00C0:  BRA    00B4
00C2:  MOVLW  8F
00C4:  MOVWF  00
00C6:  DECFSZ 00,F
00C8:  BRA    00C6
00CA:  CLRWDT
00CC:  DECFSZ FEF,F
00CE:  BRA    00B0
00D0:  RETURN 0
.................... /* --- BEGIN: changes required for bootloader ------------------------------ */ 
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* map reset vector and interrupt vector                                     */ 
.................... /* 0x000-0x7FF is used by the bootloader. The bootloader maps the original   */ 
.................... /* reset vecotr (0x000) to 0x800 and the reset vector (0x008) to 0x800.      */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... #build (reset=0x000, interrupt=0x008) 
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* reserve boot block area                                                   */ 
.................... /* This memory range is used by the bootloader, so the application must not  */ 
.................... /* use this area.                                                            */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... //#org 0  , 0x000 {} 
....................  
.................... /* --- END: changes required for bootloader -------------------------------- */ 
....................  
....................  
....................  
....................  
....................  
....................  
.................... #byte PORTB=0xF81 
.................... #byte PORTD=0xF83 
....................  
.................... int8 counter=0x30; 
....................  
.................... void init(void); 
.................... void rb(void); 
....................  
....................  
.................... void main(){ 
*
011E:  CLRF   FF8
0120:  BCF    FF1.0
0122:  BSF    FD0.7
0124:  BSF    07.7
0126:  MOVLW  30
0128:  MOVWF  16
012A:  MOVF   FC1,W
012C:  ANDLW  C0
012E:  IORLW  0F
0130:  MOVWF  FC1
0132:  MOVLW  07
0134:  MOVWF  FB4
....................     init(); 
0136:  BRA    0108
....................     while (TRUE) 
....................     { 
0138:  BRA    0138
....................     } 
....................      
.................... } 
....................  
013A:  BRA    013A
.................... void init() 
.................... { 
....................     set_tris_b(0xFF); 
*
0108:  MOVLW  FF
010A:  MOVWF  F93
....................     set_tris_d(0x00); 
010C:  MOVLW  00
010E:  MOVWF  F95
....................  
....................     port_b_pullups(TRUE); 
0110:  BCF    FF1.7
....................     enable_interrupts(GLOBAL); 
0112:  MOVLW  C0
0114:  IORWF  FF2,F
....................     enable_interrupts(INT_RB); 
0116:  BSF    FF2.3
....................     PORTD=0x00; 
0118:  CLRF   F83
011A:  GOTO   0138 (RETURN)
.................... } 
....................  
.................... #INT_RB 
.................... void rb(void) 
.................... { 
....................     if(input(PIN_B0)==1) 
*
00D2:  BSF    F93.0
00D4:  BTFSS  F81.0
00D6:  BRA    0102
....................     { 
....................         delay_ms(3000); 
00D8:  MOVLW  0C
00DA:  MOVWF  17
00DC:  MOVLW  FA
00DE:  MOVWF  18
00E0:  RCALL  00A6
00E2:  DECFSZ 17,F
00E4:  BRA    00DC
....................         if(input(PIN_B0)==1) 
00E6:  BSF    F93.0
00E8:  BTFSS  F81.0
00EA:  BRA    0102
....................         { 
....................             output_high(PIN_D0); 
00EC:  BCF    F95.0
00EE:  BSF    F8C.0
....................             delay_ms(3000); 
00F0:  MOVLW  0C
00F2:  MOVWF  17
00F4:  MOVLW  FA
00F6:  MOVWF  18
00F8:  RCALL  00A6
00FA:  DECFSZ 17,F
00FC:  BRA    00F4
....................             output_low(PIN_D0); 
00FE:  BCF    F95.0
0100:  BCF    F8C.0
....................         } 
....................     } 
0102:  BCF    FF2.0
0104:  GOTO   0064
.................... } 

Configuration Fuses:
   Word  1: 0E24   PLL5 CPUDIV1 USBDIV HSPLL NOFCMEN NOIESO
   Word  2: 1E39   NOPUT NOBROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8000   CCP2B3 NOPBADEN NOLPT1OSC MCLR
   Word  4: 0020   NOSTVREN NOLVP ICSP2 NOXINST DEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB

   Some fuses have been forced to be compatible with the ICD debugger.
