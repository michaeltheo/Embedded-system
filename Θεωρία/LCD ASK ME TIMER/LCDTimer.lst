CCS PCH C Compiler, Version 5.011, 5967               26-Ã·˙-21 17:11

               Filename:   F:\Embedded Systems\»Â˘Òﬂ·\LCD ASK ME TIMER\LCDTimer.lst

               ROM used:   1024 bytes (3%)
                           Largest free fragment is 30908
               RAM used:   25 (1%) at main() level
                           47 (2%) worst case
               Stack used: 11 locations (5 in main + 6 for interrupts)
               Stack size: 30

*
0000:  GOTO   0382
*
0008:  NOP   
000A:  NOP   
000C:  NOP   
000E:  NOP   
0010:  NOP   
0012:  NOP   
0014:  NOP   
0016:  NOP   
0018:  MOVWF  04
001A:  MOVFF  FD8,05
001E:  MOVFF  FE0,06
0022:  MOVLB  0
0024:  MOVFF  FE9,0C
0028:  MOVFF  FEA,07
002C:  MOVFF  FE1,08
0030:  MOVFF  FE2,09
0034:  MOVFF  FD9,0A
0038:  MOVFF  FDA,0B
003C:  MOVFF  FF3,12
0040:  MOVFF  FF4,13
0044:  MOVFF  FFA,14
0048:  MOVFF  00,0E
004C:  MOVFF  01,0F
0050:  MOVFF  02,10
0054:  MOVFF  03,11
0058:  BTFSS  FF2.5
005A:  GOTO   0064
005E:  BTFSC  FF2.2
0060:  GOTO   0214
0064:  MOVFF  0E,00
0068:  MOVFF  0F,01
006C:  MOVFF  10,02
0070:  MOVFF  11,03
0074:  MOVFF  0C,FE9
0078:  MOVFF  07,FEA
007C:  BSF    07.7
007E:  MOVFF  08,FE1
0082:  MOVFF  09,FE2
0086:  MOVFF  0A,FD9
008A:  MOVFF  0B,FDA
008E:  MOVFF  12,FF3
0092:  MOVFF  13,FF4
0096:  MOVFF  14,FFA
009A:  MOVF   04,W
009C:  MOVFF  06,FE0
00A0:  MOVFF  05,FD8
00A4:  RETFIE 0
.................... #include <main-proteus.h> 
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
00A6:  MOVFF  FF2,0D
00AA:  BCF    FF2.6
00AC:  BCF    FF2.7
00AE:  CLRF   FF7
00B0:  ADDLW  C6
00B2:  MOVWF  FF6
00B4:  MOVLW  00
00B6:  ADDWFC FF7,F
00B8:  TBLRD*+
00BA:  MOVF   FF5,W
00BC:  BTFSC  0D.6
00BE:  BSF    FF2.6
00C0:  BTFSC  0D.7
00C2:  BSF    FF2.7
00C4:  RETURN 0
00C6:  DATA 28,0C
00C8:  DATA 01,06
00CA:  DATA 0C,00
00CC:  DATA 20,4D
00CE:  DATA 49,43
00D0:  DATA 52,4F
00D2:  DATA 20,4C
00D4:  DATA 41,42
00D6:  DATA 00,00
*
01F4:  TBLRD*+
01F6:  MOVF   FF5,F
01F8:  BZ    0212
01FA:  MOVFF  FF6,24
01FE:  MOVFF  FF7,25
0202:  MOVFF  FF5,26
0206:  RCALL  01B2
0208:  MOVFF  24,FF6
020C:  MOVFF  25,FF7
0210:  BRA    01F4
0212:  RETURN 0
*
026A:  DATA 2A,2A
026C:  DATA 2A,2A
026E:  DATA 2A,00
0270:  DATA 20,20
0272:  DATA 20,20
0274:  DATA 20,00
....................  
.................... #list 
....................  
.................... #DEVICE HIGH_INTS=TRUE 
....................  #device icd=2 
.................... #device adc=10 
....................  
.................... #FUSES NOWDT                     //No Watch Dog Timer 
.................... #FUSES WDT32768                    //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES HSPLL                     //High Speed Crystal/Resonator with PLL enabled 
.................... #FUSES NOPROTECT                 //Code not protected from reading 
.................... #FUSES BROWNOUT                //No brownout reset 
.................... //#FUSES BORV20                    //Brownout reset at 2.0V 
.................... #FUSES NOPUT                     //No Power Up Timer 
.................... #FUSES NOCPD                     //No EE protection 
.................... #FUSES STVREN                    //Stack full/underflow will cause reset 
.................... #FUSES NODEBUG                   //No Debug mode for ICD 
.................... #FUSES NOLVP                     //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                     //Program memory not write protected 
.................... #FUSES NOWRTD                    //Data EEPROM not write protected 
.................... #FUSES NOIESO                      //Internal External Switch Over mode enabled 
.................... #FUSES NOFCMEN                     //Fail-safe clock monitor enabled 
.................... #FUSES NOPBADEN                 ///PORTB pins are configured as analog input channels on RESET 
.................... #FUSES NOWRTC                    //configuration not registers write protected 
.................... #FUSES NOWRTB                    //Boot block not write protected 
.................... #FUSES NOEBTR                    //Memory not protected from table reads 
.................... #FUSES NOEBTRB                   //Boot block not protected from table reads 
.................... #FUSES NOCPB                     //No Boot Block code protection 
.................... #FUSES MCLR                      //Master Clear pin enabled 
.................... #FUSES NOLPT1OSC                   //Timer1 configured for low-power operation 
.................... #FUSES NOXINST                   //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... #FUSES PLL5                      //Divide By 12(48MHz oscillator input) 
.................... #FUSES CPUDIV1                   //System Clock by 2 
.................... #FUSES USBDIV                    //USB clock source comes from PLL divide by 2 
.................... #FUSES VREGEN                    //USB voltage regulator enabled 
.................... //#FUSES ICPRT                     //ICPRT enabled 
.................... #FUSES WRTB 
.................... #FUSES NOICPRT  
.................... #FUSES NOLPT1OSC 
.................... #FUSES CCP2B3  
.................... #FUSES NOCPB 
.................... #FUSES NOCPD 
.................... #FUSES NOWRTC 
.................... #FUSES NOWRTD 
.................... #FUSES NOEBTR 
.................... #FUSES NOEBTRB               
....................  
.................... /* systm clock is 48 MHz */ 
.................... #use delay(clock=48000000,RESTART_WDT) 
*
0186:  CLRF   FEA
0188:  MOVLW  27
018A:  MOVWF  FE9
018C:  MOVF   FEF,W
018E:  BZ    01B0
0190:  MOVLW  0F
0192:  MOVWF  01
0194:  MOVLW  BF
0196:  MOVWF  00
0198:  CLRWDT
019A:  DECFSZ 00,F
019C:  BRA    0198
019E:  DECFSZ 01,F
01A0:  BRA    0194
01A2:  MOVLW  8F
01A4:  MOVWF  00
01A6:  DECFSZ 00,F
01A8:  BRA    01A6
01AA:  CLRWDT
01AC:  DECFSZ FEF,F
01AE:  BRA    0190
01B0:  RETURN 0
.................... /* --- BEGIN: changes required for bootloader ------------------------------ */ 
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* map reset vector and interrupt vector                                     */ 
.................... /* 0x000-0x7FF is used by the bootloader. The bootloader maps the original   */ 
.................... /* reset vecotr (0x000) to 0x800 and the reset vector (0x008) to 0x800.      */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... #build (reset=0x000, interrupt=0x008) 
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* reserve boot block area                                                   */ 
.................... /* This memory range is used by the bootloader, so the application must not  */ 
.................... /* use this area.                                                            */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... //#org 0  , 0x000 {} 
....................  
.................... /* --- END: changes required for bootloader -------------------------------- */ 
....................  
....................  
....................  
....................  
....................  
.................... #include <flex_lcd-proteus.h> 
.................... //--------------------------------------------------- 
.................... #define LCD_DB4   PIN_B4 
.................... #define LCD_DB5   PIN_B5 
.................... #define LCD_DB6   PIN_B6 
.................... #define LCD_DB7   PIN_B7 
....................  
.................... #define LCD_E      PIN_B3 
.................... #define LCD_RS     PIN_B2 
.................... #define LCD_RW     PIN_B1 
.................... #define lcd_type 2        // 0=5x7, 1=5x10, 2=2 lines 
.................... #define lcd_line_two 0x40 // LCD RAM address for the 2nd line 
.................... int8 const LCD_INIT_STRING[4] = 
.................... { 
....................  0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots 
....................  0xc,                    // Display on 
....................  1,                      // Clear display 
....................  6                       // Increment cursor 
....................  }; 
.................... //================================================================= 
.................... void lcd_send_nibble(int8 nibble); 
.................... void lcd_send_byte(int8 address, int8 n); 
.................... void lcd_init(void); 
.................... void lcd_gotoxy(int8 x, int8 y); 
.................... void lcd_putc(char c); 
.................... //================================================================= 
.................... //------------------------------------------------------------- 
.................... void lcd_send_nibble(int8 nibble) 
.................... { 
.................... // Note:  !! converts an integer expression 
.................... // to a boolean (1 or 0). 
....................  output_bit(LCD_DB4, !!(nibble & 1)); 
*
00D8:  BTFSC  2E.0
00DA:  BRA    00E0
00DC:  BCF    F8A.4
00DE:  BRA    00E2
00E0:  BSF    F8A.4
00E2:  BCF    F93.4
....................  output_bit(LCD_DB5, !!(nibble & 2));  
00E4:  BTFSC  2E.1
00E6:  BRA    00EC
00E8:  BCF    F8A.5
00EA:  BRA    00EE
00EC:  BSF    F8A.5
00EE:  BCF    F93.5
....................  output_bit(LCD_DB6, !!(nibble & 4));    
00F0:  BTFSC  2E.2
00F2:  BRA    00F8
00F4:  BCF    F8A.6
00F6:  BRA    00FA
00F8:  BSF    F8A.6
00FA:  BCF    F93.6
....................  output_bit(LCD_DB7, !!(nibble & 8));    
00FC:  BTFSC  2E.3
00FE:  BRA    0104
0100:  BCF    F8A.7
0102:  BRA    0106
0104:  BSF    F8A.7
0106:  BCF    F93.7
....................  
....................  delay_cycles(20); 
0108:  MOVLW  06
010A:  MOVWF  00
010C:  DECFSZ 00,F
010E:  BRA    010C
0110:  NOP   
....................  output_high(LCD_E); 
0112:  BCF    F93.3
0114:  BSF    F8A.3
....................  delay_us(50); 
0116:  CLRWDT
0118:  MOVLW  C7
011A:  MOVWF  00
011C:  DECFSZ 00,F
011E:  BRA    011C
0120:  NOP   
....................  output_low(LCD_E); 
0122:  BCF    F93.3
0124:  BCF    F8A.3
0126:  RETURN 0
.................... } 
....................  
.................... //----------------------------------- 
.................... // This sub-routine is only called by lcd_read_byte(). 
.................... // It's not a stand-alone routine.  For example, the 
.................... // R/W signal is set high by lcd_read_byte() before 
.................... // this routine is called.      
....................  
....................  
.................... //---------------------------------------- 
.................... // Send a byte to the LCD. 
.................... void lcd_send_byte(int8 address, int8 n) 
.................... { 
.................... output_low(LCD_RS); 
0128:  BCF    F93.2
012A:  BCF    F8A.2
....................  
.................... if(address) 
012C:  MOVF   2B,F
012E:  BZ    0136
....................    output_high(LCD_RS); 
0130:  BCF    F93.2
0132:  BSF    F8A.2
0134:  BRA    013A
.................... else 
....................    output_low(LCD_RS); 
0136:  BCF    F93.2
0138:  BCF    F8A.2
....................       
....................  delay_cycles(10); 
013A:  MOVLW  02
013C:  MOVWF  00
013E:  DECFSZ 00,F
0140:  BRA    013E
0142:  BRA    0144
0144:  NOP   
....................  
.................... output_low(LCD_E); 
0146:  BCF    F93.3
0148:  BCF    F8A.3
....................  
.................... lcd_send_nibble(n >> 4); 
014A:  SWAPF  2C,W
014C:  MOVWF  2D
014E:  MOVLW  0F
0150:  ANDWF  2D,F
0152:  MOVFF  2D,2E
0156:  RCALL  00D8
.................... lcd_send_nibble(n & 0xf); 
0158:  MOVF   2C,W
015A:  ANDLW  0F
015C:  MOVWF  2D
015E:  MOVWF  2E
0160:  RCALL  00D8
0162:  RETURN 0
.................... } 
....................  
.................... //---------------------------- 
.................... void lcd_init(void) 
.................... { 
.................... int8 i; 
....................  
.................... output_low(LCD_RS); 
*
029A:  BCF    F93.2
029C:  BCF    F8A.2
....................  
.................... output_low(LCD_E); 
029E:  BCF    F93.3
02A0:  BCF    F8A.3
.................... output_low(LCD_RW);			 
02A2:  BCF    F93.1
02A4:  BCF    F8A.1
02A6:  CLRF   16
02A8:  BTFSC  FF2.6
02AA:  BSF    16.6
02AC:  BCF    FF2.6
02AE:  BTFSC  FF2.7
02B0:  BSF    16.7
02B2:  BCF    FF2.7
.................... delay_ms(10); 
02B4:  MOVLW  0A
02B6:  MOVWF  27
02B8:  RCALL  0186
02BA:  BTFSC  16.6
02BC:  BSF    FF2.6
02BE:  BTFSC  16.7
02C0:  BSF    FF2.7
....................  
.................... for(i=0 ;i < 3; i++) 
02C2:  CLRF   19
02C4:  MOVF   19,W
02C6:  SUBLW  02
02C8:  BNC   0306
02CA:  CLRF   16
02CC:  BTFSC  FF2.6
02CE:  BSF    16.6
02D0:  BCF    FF2.6
02D2:  BTFSC  FF2.7
02D4:  BSF    16.7
02D6:  BCF    FF2.7
....................    { 
....................     lcd_send_nibble(0x03); 
02D8:  MOVLW  03
02DA:  MOVWF  2E
02DC:  RCALL  00D8
02DE:  BTFSC  16.6
02E0:  BSF    FF2.6
02E2:  BTFSC  16.7
02E4:  BSF    FF2.7
02E6:  CLRF   16
02E8:  BTFSC  FF2.6
02EA:  BSF    16.6
02EC:  BCF    FF2.6
02EE:  BTFSC  FF2.7
02F0:  BSF    16.7
02F2:  BCF    FF2.7
....................     delay_ms(2); 
02F4:  MOVLW  02
02F6:  MOVWF  27
02F8:  RCALL  0186
02FA:  BTFSC  16.6
02FC:  BSF    FF2.6
02FE:  BTFSC  16.7
0300:  BSF    FF2.7
0302:  INCF   19,F
0304:  BRA    02C4
0306:  CLRF   16
0308:  BTFSC  FF2.6
030A:  BSF    16.6
030C:  BCF    FF2.6
030E:  BTFSC  FF2.7
0310:  BSF    16.7
0312:  BCF    FF2.7
....................    } 
....................  
.................... lcd_send_nibble(0x02); 
0314:  MOVLW  02
0316:  MOVWF  2E
0318:  RCALL  00D8
031A:  BTFSC  16.6
031C:  BSF    FF2.6
031E:  BTFSC  16.7
0320:  BSF    FF2.7
....................  
.................... for(i=0; i < sizeof(LCD_INIT_STRING); i++) 
0322:  CLRF   19
0324:  MOVF   19,W
0326:  SUBLW  03
0328:  BNC   037E
....................    { 
....................     lcd_send_byte(0, LCD_INIT_STRING[i]); 
032A:  CLRF   03
032C:  MOVF   19,W
032E:  MOVFF  FF2,1A
0332:  BCF    FF2.6
0334:  BCF    FF2.7
0336:  RCALL  00A6
0338:  BTFSC  1A.6
033A:  BSF    FF2.6
033C:  BTFSC  1A.7
033E:  BSF    FF2.7
0340:  MOVWF  1A
0342:  CLRF   16
0344:  BTFSC  FF2.6
0346:  BSF    16.6
0348:  BCF    FF2.6
034A:  BTFSC  FF2.7
034C:  BSF    16.7
034E:  BCF    FF2.7
0350:  CLRF   2B
0352:  MOVWF  2C
0354:  RCALL  0128
0356:  BTFSC  16.6
0358:  BSF    FF2.6
035A:  BTFSC  16.7
035C:  BSF    FF2.7
035E:  CLRF   16
0360:  BTFSC  FF2.6
0362:  BSF    16.6
0364:  BCF    FF2.6
0366:  BTFSC  FF2.7
0368:  BSF    16.7
036A:  BCF    FF2.7
....................     
....................     // If the R/W signal is not used, then 
....................     // the busy bit can't be polled.  One of 
....................     // the init commands takes longer than 
....................     // the hard-coded delay of 60 us, so in 
....................     // that case, lets just do a 5 ms delay 
....................     // after all four of them. 
....................     
....................     delay_ms(1); 
036C:  MOVLW  01
036E:  MOVWF  27
0370:  RCALL  0186
0372:  BTFSC  16.6
0374:  BSF    FF2.6
0376:  BTFSC  16.7
0378:  BSF    FF2.7
037A:  INCF   19,F
037C:  BRA    0324
....................     } 
037E:  GOTO   03A0 (RETURN)
....................  
.................... } 
....................  
.................... //---------------------------- 
....................  
.................... void lcd_gotoxy(int8 x, int8 y) 
.................... { 
.................... int8 address; 
....................  
.................... if(y != 1) 
*
0164:  DECFSZ 28,W
0166:  BRA    016A
0168:  BRA    0170
....................    address = lcd_line_two; 
016A:  MOVLW  40
016C:  MOVWF  29
016E:  BRA    0172
.................... else 
....................    address=0; 
0170:  CLRF   29
....................  
.................... address += x-1; 
0172:  MOVLW  01
0174:  SUBWF  27,W
0176:  ADDWF  29,F
.................... lcd_send_byte(0, 0x80 | address); 
0178:  MOVF   29,W
017A:  IORLW  80
017C:  MOVWF  2A
017E:  CLRF   2B
0180:  MOVWF  2C
0182:  RCALL  0128
0184:  RETURN 0
.................... } 
....................  
.................... //----------------------------- 
.................... void lcd_putc(char c) 
.................... { 
....................  switch(c) 
*
01B2:  MOVF   26,W
01B4:  XORLW  0C
01B6:  BZ    01C2
01B8:  XORLW  06
01BA:  BZ    01D2
01BC:  XORLW  02
01BE:  BZ    01DE
01C0:  BRA    01E8
....................    { 
....................     case '\f': 
....................       lcd_send_byte(0,1); 
01C2:  CLRF   2B
01C4:  MOVLW  01
01C6:  MOVWF  2C
01C8:  RCALL  0128
....................       delay_ms(1); 
01CA:  MOVLW  01
01CC:  MOVWF  27
01CE:  RCALL  0186
....................       break; 
01D0:  BRA    01F2
....................     
....................     case '\n': 
....................        lcd_gotoxy(1,2); 
01D2:  MOVLW  01
01D4:  MOVWF  27
01D6:  MOVLW  02
01D8:  MOVWF  28
01DA:  RCALL  0164
....................        break; 
01DC:  BRA    01F2
....................     
....................     case '\b': 
....................        lcd_send_byte(0,0x10); 
01DE:  CLRF   2B
01E0:  MOVLW  10
01E2:  MOVWF  2C
01E4:  RCALL  0128
....................        break; 
01E6:  BRA    01F2
....................     
....................     default: 
....................        lcd_send_byte(1,c); 
01E8:  MOVLW  01
01EA:  MOVWF  2B
01EC:  MOVFF  26,2C
01F0:  RCALL  0128
....................        break; 
....................    } 
01F2:  RETURN 0
.................... } 
....................  
.................... //------------------------------ 
....................  
....................  
....................  
....................  
.................... #byte PORTB=0xf81 
....................  
....................  
.................... //kathe 200 ms toogle opote meta apo 4 diakopes 4*50 =200ms  
.................... int counter=4;  
....................  
.................... //initialize state  
.................... //state 1= emfanisontai **** 
.................... //state 2=  den emfanisontai **** 
....................  
.................... int8 state=0; 
....................  
.................... void timer0_int(void); 
.................... void init(void); 
....................  
.................... void main(){ 
*
0382:  CLRF   FF8
0384:  BCF    FF1.2
0386:  BSF    FD0.7
0388:  BSF    07.7
038A:  MOVLW  04
038C:  MOVWF  17
038E:  CLRF   18
0390:  MOVF   FC1,W
0392:  ANDLW  C0
0394:  IORLW  0F
0396:  MOVWF  FC1
0398:  MOVLW  07
039A:  MOVWF  FB4
.................... init(); 
039C:  BRA    0276
.................... lcd_init(); 
039E:  BRA    029A
.................... lcd_putc("\f"); //clear lcd screen; 
03A0:  MOVLW  CA
03A2:  MOVWF  FF6
03A4:  MOVLW  00
03A6:  MOVWF  FF7
03A8:  CLRF   16
03AA:  BTFSC  FF2.6
03AC:  BSF    16.6
03AE:  BCF    FF2.6
03B0:  BTFSC  FF2.7
03B2:  BSF    16.7
03B4:  BCF    FF2.7
03B6:  RCALL  01F4
03B8:  BTFSC  16.6
03BA:  BSF    FF2.6
03BC:  BTFSC  16.7
03BE:  BSF    FF2.7
03C0:  CLRF   16
03C2:  BTFSC  FF2.6
03C4:  BSF    16.6
03C6:  BCF    FF2.6
03C8:  BTFSC  FF2.7
03CA:  BSF    16.7
03CC:  BCF    FF2.7
.................... lcd_gotoxy(5,1); //go to 4 position row 1  
03CE:  MOVLW  05
03D0:  MOVWF  27
03D2:  MOVLW  01
03D4:  MOVWF  28
03D6:  RCALL  0164
03D8:  BTFSC  16.6
03DA:  BSF    FF2.6
03DC:  BTFSC  16.7
03DE:  BSF    FF2.7
.................... lcd_putc(" MICRO LAB"); 
03E0:  MOVLW  CC
03E2:  MOVWF  FF6
03E4:  MOVLW  00
03E6:  MOVWF  FF7
03E8:  CLRF   16
03EA:  BTFSC  FF2.6
03EC:  BSF    16.6
03EE:  BCF    FF2.6
03F0:  BTFSC  FF2.7
03F2:  BSF    16.7
03F4:  BCF    FF2.7
03F6:  RCALL  01F4
03F8:  BTFSC  16.6
03FA:  BSF    FF2.6
03FC:  BTFSC  16.7
03FE:  BSF    FF2.7
....................  
.................... while (TRUE) 
.................... { 
0400:  BRA    0400
....................  
.................... } 
....................  
....................  
....................  
.................... } 
....................  
0402:  BRA    0402
.................... void init(){ 
.................... set_tris_b(0x00); 
*
0276:  MOVLW  00
0278:  MOVWF  F93
.................... set_tris_d(0x00); 
027A:  MOVWF  F95
.................... PORTB=0; 
027C:  CLRF   F81
.................... state=0; 
027E:  CLRF   18
.................... counter=4; 
0280:  MOVLW  04
0282:  MOVWF  17
.................... setup_timer_0(T0_INTERNAL|T0_DIV_64); 
0284:  MOVLW  85
0286:  MOVWF  FD5
.................... set_timer0(56161); 
0288:  MOVLW  DB
028A:  MOVWF  FD7
028C:  MOVLW  61
028E:  MOVWF  FD6
.................... enable_interrupts(INT_TIMER0); 
0290:  BSF    FF2.5
.................... enable_interrupts(GLOBAL); 
0292:  MOVLW  C0
0294:  IORWF  FF2,F
0296:  GOTO   039E (RETURN)
.................... } 
....................  
.................... #INT_TIMER0 
.................... void timer0_int(){ 
.................... set_timer0(56161); 
*
0214:  MOVLW  DB
0216:  MOVWF  FD7
0218:  MOVLW  61
021A:  MOVWF  FD6
.................... counter--; 
021C:  DECF   17,F
.................... if(counter==0 && state==0){ 
021E:  MOVF   17,F
0220:  BNZ   0242
0222:  MOVF   18,F
0224:  BNZ   0242
....................     counter=4; 
0226:  MOVLW  04
0228:  MOVWF  17
....................     state=1; 
022A:  MOVLW  01
022C:  MOVWF  18
....................     lcd_gotoxy(5,2); 
022E:  MOVLW  05
0230:  MOVWF  27
0232:  MOVLW  02
0234:  MOVWF  28
0236:  RCALL  0164
....................     lcd_putc("*****"); 
0238:  MOVLW  6A
023A:  MOVWF  FF6
023C:  MOVLW  02
023E:  MOVWF  FF7
0240:  RCALL  01F4
.................... } 
.................... if(counter==0 && state==1){ 
0242:  MOVF   17,F
0244:  BNZ   0264
0246:  DECFSZ 18,W
0248:  BRA    0264
....................     counter=4; 
024A:  MOVLW  04
024C:  MOVWF  17
....................     state=0; 
024E:  CLRF   18
....................     lcd_gotoxy(5,2); 
0250:  MOVLW  05
0252:  MOVWF  27
0254:  MOVLW  02
0256:  MOVWF  28
0258:  RCALL  0164
....................     lcd_putc("     "); 
025A:  MOVLW  70
025C:  MOVWF  FF6
025E:  MOVLW  02
0260:  MOVWF  FF7
0262:  RCALL  01F4
.................... } 
....................  
....................  
....................  
0264:  BCF    FF2.2
0266:  GOTO   0064
.................... } 

Configuration Fuses:
   Word  1: 0E24   PLL5 CPUDIV1 USBDIV HSPLL NOFCMEN NOIESO
   Word  2: 1E39   NOPUT NOBROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8000   CCP2B3 NOPBADEN NOLPT1OSC MCLR
   Word  4: 0020   NOSTVREN NOLVP ICSP2 NOXINST DEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB

   Some fuses have been forced to be compatible with the ICD debugger.
