CCS PCH C Compiler, Version 5.011, 5967               16-Μαρ-21 16:02

               Filename:   F:\Embedded Systems\Exercise_1d επιλογή προγράμματος\exercise_01d.lst

               ROM used:   246 bytes (1%)
                           Largest free fragment is 30470
               RAM used:   4 (0%) at main() level
                           7 (0%) worst case
               Stack used: 1 locations
               Stack size: 31

*
0800:  GOTO   0834
.................... #include <main.h> 
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
*
08D6:  ADDWF  FE8,W
08D8:  CLRF   FF7
08DA:  RLCF   FF7,F
08DC:  ADDLW  F1
08DE:  MOVWF  FF6
08E0:  MOVLW  08
08E2:  ADDWFC FF7,F
08E4:  TBLRD*-
08E6:  MOVF   FF5,W
08E8:  MOVWF  FFA
08EA:  TBLRD*
08EC:  MOVF   FF5,W
08EE:  MOVWF  FF9
08F0:  DATA 5C,08
08F2:  DATA 6E,08
08F4:  DATA 84,08
08F6:  DATA 9A,08
08F8:  DATA BE,08
....................  
.................... #list 
....................  
.................... #DEVICE HIGH_INTS=TRUE 
.................... #device adc=10 
....................  
.................... #FUSES NOWDT                     //No Watch Dog Timer 
.................... #FUSES WDT32768                    //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES HSPLL                     //High Speed Crystal/Resonator with PLL enabled 
.................... #FUSES NOPROTECT                 //Code not protected from reading 
.................... #FUSES BROWNOUT                //No brownout reset 
.................... //#FUSES BORV20                    //Brownout reset at 2.0V 
.................... #FUSES NOPUT                     //No Power Up Timer 
.................... #FUSES NOCPD                     //No EE protection 
.................... #FUSES STVREN                    //Stack full/underflow will cause reset 
.................... #FUSES NODEBUG                   //No Debug mode for ICD 
.................... #FUSES NOLVP                     //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                     //Program memory not write protected 
.................... #FUSES NOWRTD                    //Data EEPROM not write protected 
.................... #FUSES NOIESO                      //Internal External Switch Over mode enabled 
.................... #FUSES NOFCMEN                     //Fail-safe clock monitor enabled 
.................... #FUSES NOPBADEN                 ///PORTB pins are configured as analog input channels on RESET 
.................... #FUSES NOWRTC                    //configuration not registers write protected 
.................... #FUSES NOWRTB                    //Boot block not write protected 
.................... #FUSES NOEBTR                    //Memory not protected from table reads 
.................... #FUSES NOEBTRB                   //Boot block not protected from table reads 
.................... #FUSES NOCPB                     //No Boot Block code protection 
.................... #FUSES MCLR                      //Master Clear pin enabled 
.................... #FUSES NOLPT1OSC                   //Timer1 configured for low-power operation 
.................... #FUSES NOXINST                   //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... #FUSES PLL5                      //Divide By 12(48MHz oscillator input) 
.................... #FUSES CPUDIV1                   //System Clock by 2 
.................... #FUSES USBDIV                    //USB clock source comes from PLL divide by 2 
.................... #FUSES VREGEN                    //USB voltage regulator enabled 
.................... #FUSES ICPRT                     //ICPRT enabled 
.................... #FUSES WRTB 
.................... #FUSES NOICPRT  
.................... #FUSES NOLPT1OSC 
.................... #FUSES CCP2B3  
.................... #FUSES NOCPB 
.................... #FUSES NOCPD 
.................... #FUSES NOWRTC 
.................... #FUSES NOWRTD 
.................... #FUSES NOEBTR 
.................... #FUSES NOEBTRB               
....................  
.................... /* systm clock is 48 MHz */ 
.................... #use delay(clock=48000000,RESTART_WDT) 
*
0808:  CLRF   FEA
080A:  MOVLW  07
080C:  MOVWF  FE9
080E:  MOVF   FEF,W
0810:  BZ    0832
0812:  MOVLW  0F
0814:  MOVWF  01
0816:  MOVLW  BF
0818:  MOVWF  00
081A:  CLRWDT
081C:  DECFSZ 00,F
081E:  BRA    081A
0820:  DECFSZ 01,F
0822:  BRA    0816
0824:  MOVLW  8F
0826:  MOVWF  00
0828:  DECFSZ 00,F
082A:  BRA    0828
082C:  CLRWDT
082E:  DECFSZ FEF,F
0830:  BRA    0812
0832:  RETURN 0
.................... /* --- BEGIN: changes required for bootloader ------------------------------ */ 
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* map reset vector and interrupt vector                                     */ 
.................... /* 0x000-0x7FF is used by the bootloader. The bootloader maps the original   */ 
.................... /* reset vecotr (0x000) to 0x800 and the reset vector (0x008) to 0x800.      */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... #build (reset=0x800, interrupt=0x808) 
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* reserve boot block area                                                   */ 
.................... /* This memory range is used by the bootloader, so the application must not  */ 
.................... /* use this area.                                                            */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... #org 0, 0x7FF {} 
....................  
.................... /* --- END: changes required for bootloader -------------------------------- */ 
....................  
....................  
....................  
....................  
....................  
....................  
.................... #byte PORTB=0xF81 
.................... #byte PORTD=0xF83 
....................  
.................... void main() 
0834:  CLRF   FF8
0836:  BSF    FD0.7
0838:  MOVF   FC1,W
083A:  ANDLW  C0
083C:  IORLW  0F
083E:  MOVWF  FC1
0840:  MOVLW  07
0842:  MOVWF  FB4
.................... { 
....................     set_tris_b(0x00); 
0844:  MOVLW  00
0846:  MOVWF  F93
....................     set_tris_d(0xFF); 
0848:  MOVLW  FF
084A:  MOVWF  F95
....................  
....................     int a; 
....................     while(TRUE) 
....................     { 
....................         a=PORTD; 
084C:  MOVFF  F83,05
....................         switch (a) 
0850:  MOVF   05,W
0852:  ADDLW  FB
0854:  BC    08D2
0856:  ADDLW  05
0858:  GOTO   08D6
....................         { 
....................         case 0:  
....................                 PORTB=0xFF; 
085C:  SETF   F81
....................                 delay_ms(100); 
085E:  MOVLW  64
0860:  MOVWF  07
0862:  RCALL  0808
....................                 PORTB=0x00; 
0864:  CLRF   F81
....................                 delay_ms(100); 
0866:  MOVLW  64
0868:  MOVWF  07
086A:  RCALL  0808
....................             break; 
086C:  BRA    08D2
....................         case 1: PORTB=0b11000011; 
086E:  MOVLW  C3
0870:  MOVWF  F81
....................                 delay_ms(100); 
0872:  MOVLW  64
0874:  MOVWF  07
0876:  RCALL  0808
....................                 PORTB=0b00111100; 
0878:  MOVLW  3C
087A:  MOVWF  F81
....................                 delay_ms(100); 
087C:  MOVLW  64
087E:  MOVWF  07
0880:  RCALL  0808
....................             break; 
0882:  BRA    08D2
....................         case 2: 
....................                 PORTB=0b10101010; 
0884:  MOVLW  AA
0886:  MOVWF  F81
....................                 delay_ms(100); 
0888:  MOVLW  64
088A:  MOVWF  07
088C:  RCALL  0808
....................                 PORTB=0b01010101; 
088E:  MOVLW  55
0890:  MOVWF  F81
....................                 delay_ms(100); 
0892:  MOVLW  64
0894:  MOVWF  07
0896:  RCALL  0808
....................             break; 
0898:  BRA    08D2
....................         case 3: 
....................                 PORTB=0b10000000; 
089A:  MOVLW  80
089C:  MOVWF  F81
....................                 for(int i=1;i<=7;i++) 
089E:  MOVLW  01
08A0:  MOVWF  06
08A2:  MOVF   06,W
08A4:  SUBLW  07
08A6:  BNC   08B6
....................                 { 
....................                     delay_ms(50); 
08A8:  MOVLW  32
08AA:  MOVWF  07
08AC:  RCALL  0808
....................                     PORTB=PORTB/2; 
08AE:  BCF    FD8.0
08B0:  RRCF   F81,F
08B2:  INCF   06,F
08B4:  BRA    08A2
....................                 } 
....................                 delay_ms(100); 
08B6:  MOVLW  64
08B8:  MOVWF  07
08BA:  RCALL  0808
....................             break; 
08BC:  BRA    08D2
....................         case 4:PORTB=0xF0; 
08BE:  MOVLW  F0
08C0:  MOVWF  F81
....................                delay_ms(100); 
08C2:  MOVLW  64
08C4:  MOVWF  07
08C6:  RCALL  0808
....................                PORTB=0x0F; 
08C8:  MOVLW  0F
08CA:  MOVWF  F81
....................                delay_ms(100); 
08CC:  MOVLW  64
08CE:  MOVWF  07
08D0:  RCALL  0808
....................             break; 
....................         } 
08D2:  BRA    084C
....................     } 
.................... } 
08D4:  SLEEP 

Configuration Fuses:
   Word  1: 0E24   PLL5 CPUDIV1 USBDIV HSPLL NOFCMEN NOIESO
   Word  2: 1E3F   NOPUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8000   CCP2B3 NOPBADEN NOLPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP ICSP1 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: A00F   NOWRT NOWRTC WRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
